{"version":3,"sources":["../src/lib/constants.ts","../src/actions/checkouts/mercadopago/create-mercadopago-checkout.ts","../src/actions/checkouts/stripe/create-stripe-checkout.ts","../src/actions/authorizations/paypal/generate-paypal-access-token.ts","../src/actions/checkouts/paypal/create-paypal-checkout.ts","../src/actions/authorizations/talo/generate-talo-access-token.ts","../src/actions/checkouts/talo/create-talo-checkout.ts","../src/actions/checkouts/square/create-square-checkout.ts","../src/lib/idemopotency-keygen.ts","../src/actions/authorizations/square/get-square-location.ts","../src/lib/version-validator.ts","../src/methods/pay.ts","../src/actions/authorizations/mercadopago/verify-mercadopago-signature.ts","../src/actions/webhooks/mercadopago/mercadopago-webhook-handler.ts","../src/actions/webhooks/stripe/stripe-webhook-handler.ts","../src/lib/algorithm-map.ts","../src/actions/authorizations/paypal/certification.ts","../src/actions/authorizations/paypal/verify-paypal-signature.ts","../src/actions/captures/paypal/capture-paypal-payment.ts","../src/actions/webhooks/paypal/paypal-webhook-handler.ts","../src/actions/retrievals/talo/retrieve-talo-operation.ts","../src/actions/webhooks/talo/talo-webhook-handler.ts","../src/actions/authorizations/square/verify-square-signature.ts","../src/actions/webhooks/square/square-webhook-handler.ts","../src/methods/webhook.ts","../src/methods/subscribe.ts","../src/methods/portal.ts","../src/methods/connect.ts","../src/actions/retrievals/mercadopago/retrieve-mercadopago-operation.ts","../src/actions/refunds/mercadopago/refund-mercadopago-payment.ts","../src/actions/retrievals/stripe/retrieve-stripe-operation.ts","../src/lib/object-serialize.ts","../src/actions/refunds/stripe/refund-stripe-payment.ts","../src/actions/retrievals/paypal/retrieve-paypal-operation.ts","../src/actions/refunds/paypal/refund-paypal-payment.ts","../src/methods/refund.ts","../src/methods.ts"],"names":["SUPPORTED_PLATFORMS","createMercadoPagoCheckout","vexor","body","_a","_b","_c","_d","platformCredentials","mercadopagoAccessToken","itemsWithIds","item","uuidv4","identifier","preferenceBody","API_URL","result","error","create_mercadopago_checkout_default","createStripeCheckout","stripeSecretKey","stripe","Stripe","lineItems","checkoutSessionBody","create_stripe_checkout_default","generatePaypalAccessToken","clientId","clientSecret","base","auth","createPaypalCheckout","_e","paypalSecretKey","paypalClientId","accessToken","url","itemsWithAmounts","itemTotal","sum","payload","response","jsonResponse","link","create_paypal_checkout_default","generateTaloAccessToken","user_id","client_id","client_secret","res","createTaloCheckout","taloUserId","taloClientId","taloClientSecret","isSandbox","mode","tokenResult","taloToken","totalAmount","acc","itemNames","paymentObject","create_talo_checkout_default","generate_x_IdempotencyKey","c","r","v","getSquareLocation","locationsResponse","createSquareCheckout","squareAccessToken","squareLocationId","create_square_checkout_default","isOpenSource","VersionChecker","vexorPay","params","createCheckout","platform","data","errorMessage","isValidMercadoPagoSignature","x_signature","mercadopagoWebhookSecret","data_id","x_request_id","_f","ts","hash","manifest","isValidSignature","crypto","handleMercadoPagoWebhook","req","_g","_h","_i","_j","payment_url","payment_data","responseMessage","status","subscription_data","preapproval_data","authorized_payment","no_entity_data","getSubscriptionWithRetry","subscriptionId","maxRetries","i","subscription","resolve","handleStripeWebhook","request","signature","stripePublicKey","stripeWebhookSecrets","event","webhookSecret","isSubscriptionCheckout","mapAuthAlgo","algo","downloadAndCacheCertificate","reject","https","chunk","err","verifyPaypalSignature","message","transmissionSig","certUrl","authAlgo","cert","cryptoAlgo","verifier","signatureBuffer","capturePaypalPayment","orderId","paypalAccessToken","handlePaypalWebhook","headersList","transmissionId","timeStamp","crc","crc32","paypalWebhookId","retrieveTaloOperation","operationId","handleTaloWebhook","taloPaymentData","verifySquareSignature","webhooks_url","webhook_signature_key","payloadBytes","signatureKeyBytes","hmac","handleSquareWebhook","squareApplicationId","squareWebhooksUrl","squareWebhookSignatureKey","vexorWebhook","handleWebhook","headers","queryParams","forwardRequest","vexorSubscribe","createSubscription","vexorPortal","createPortal","vexorConnect","createConnect","createConnectAuth","createConnectPay","createConnectDashboard","createConnectRefund","createConnectAuthRefresh","retrieveMercadoPagoOperation","retrieve_mercadopago_operation_default","refundMercadoPagoPayment","idempotency_key","payment_response","paymentId","refund_response","refund_mercadopago_payment_default","retrieveStripeOperation","retrieve_stripe_operation_default","serializeToPlainObject","obj","key","value","refundStripePayment","refund_stripe_payment_default","retrievePaypalOperation","orderData","captureId","captureData","retrieve_paypal_operation_default","refundPaypalPayment","paymentCaptureId","refund_paypal_payment_default","vexorRefund","createRefund","_Vexor","publishableKey","secretKey","projectId","instance","Vexor"],"mappings":"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","file":"index.mjs","sourcesContent":["export const SUPPORTED_PLATFORMS = {\n    MERCADO_PAGO: {\n        name: 'mercadopago',\n        base_url: {\n            production: 'https://api.mercadopago.com',\n            sandbox: 'https://api.mercadopago.com'\n        }\n    },\n    STRIPE: {\n        name: 'stripe',\n        base_url: {\n            production: 'https://www.stripe.com',\n            sandbox: 'https://sandbox.stripe.com'\n        }\n    },\n    PAYPAL: {\n        name: 'paypal',\n        base_url: {\n            production: 'https://api-m.paypal.com',\n            sandbox: 'https://api-m.sandbox.paypal.com'\n        }\n    },\n    TALO: {\n        name: 'talo',\n        base_url: {\n            production: 'https://api.talo.com.ar',\n            sandbox: 'https://sandbox-api.talo.com.ar'\n        }\n    },\n    SQUARE: {\n        name: 'square',\n        base_url: {\n            production: 'https://connect.squareup.com',\n            sandbox: 'https://connect.squareupsandbox.com'\n        }\n    }\n};","import { SUPPORTED_PLATFORMS } from \"../../../lib/constants\";\nimport { Vexor } from \"../../../methods\";\nimport { VexorPaymentBody } from \"../../../types/requests\";\nimport { VexorPaymentResponse } from \"../../../types/responses\";\nimport { v4 as uuidv4 } from 'uuid';\n\nconst createMercadoPagoCheckout = async (\n    vexor: Vexor,\n    body: VexorPaymentBody\n) => {\n\n    try {\n\n        // Get the platform credentials\n        const platformCredentials = vexor.platforms?.mercadopago\n\n        if (!platformCredentials) {\n            throw new Error('MercadoPago credentials not found');\n        }\n\n        const mercadopagoAccessToken = platformCredentials.access_token\n\n        if (!mercadopagoAccessToken) {\n            throw new Error('MercadoPago access token not found');\n        }\n\n        const itemsWithIds = body.items.map(item => ({\n            ...item,\n            id: item.id || uuidv4()\n        }));\n\n        const identifier = uuidv4();\n\n        const preferenceBody: any = {\n            items: itemsWithIds,\n            binary_mode: true,\n            metadata: {\n                identifier: identifier\n            },\n            external_reference: identifier,\n            back_urls: {\n                success: body.options?.successRedirect || 'http://localhost:3000',\n                pending: body.options?.pendingRedirect || 'http://localhost:3000',\n                failure: body.options?.failureRedirect || 'http://localhost:3000'\n            }\n        };\n\n\n        const API_URL = SUPPORTED_PLATFORMS.MERCADO_PAGO.base_url.production;\n\n        // Make the API call to Mercadopago\n        const preference_response: any = await fetch(`${API_URL}/checkout/preferences`, {\n            method: \"POST\",\n            body: JSON.stringify(preferenceBody),\n            headers: {\n                \"Content-Type\": \"application/json\",\n                \"Authorization\": `Bearer ${mercadopagoAccessToken}`,\n            },\n        })\n\n        // Get the API response\n        const result = await preference_response.json();\n\n        return {\n            message: 'Mercadopago checkout created',\n            payment_url: result.init_point,\n            raw: result,\n            identifier\n        }\n\n    } catch (error) {\n        console.error('Error creating MercadoPago checkout', error);\n        throw error;\n    }\n}\n\nexport default createMercadoPagoCheckout;   ","import { VexorPaymentBody } from \"../../../types/requests\";\nimport { Vexor } from \"../../../methods\";\nimport { VexorPaymentResponse } from \"../../../types/responses\";\nimport { v4 as uuidv4 } from 'uuid';\nimport Stripe from 'stripe';\n\nconst createStripeCheckout = async (\n    vexor: Vexor,\n    body: VexorPaymentBody\n) => {\n\n    const identifier = uuidv4();\n\n    try {\n\n        // Get the platform credentials\n        const platformCredentials = vexor.platforms?.stripe\n\n        if (!platformCredentials) {\n            throw new Error('Stripe credentials not found');\n        }\n\n        const stripeSecretKey = platformCredentials.secret_key\n\n        if (!stripeSecretKey) {\n            throw new Error('Stripe secret key not found');\n        }\n\n        const stripe = new Stripe(stripeSecretKey);\n\n        const lineItems = body.items.map(item => ({\n            price_data: {\n                currency: body.options?.currency || 'usd',\n                product_data: {\n                    name: item.title,\n                },\n                unit_amount: Math.round(item.unit_price * 100),\n            },\n            quantity: item.quantity,\n        }));\n\n        const checkoutSessionBody: Stripe.Checkout.SessionCreateParams = {\n            payment_method_types: ['card'],\n            line_items: lineItems,\n            mode: 'payment',\n            metadata: {\n                identifier: identifier\n            },\n            payment_intent_data: {\n                metadata: {\n                    identifier: identifier\n                },\n            },\n            success_url: body.options?.successRedirect || 'http://localhost:3000/success',\n            cancel_url: body.options?.failureRedirect || 'http://localhost:3000/failure',\n        };\n\n\n        const result = await stripe.checkout.sessions.create(checkoutSessionBody);\n\n\n        return {\n            message: 'Payment checkout created',\n            payment_url: result.url as string,\n            raw: { ...result },\n            identifier\n        }\n\n    } catch (error) {\n        console.error('Error creating Stripe checkout', error);\n        throw error;\n    }\n}\n\nexport default createStripeCheckout;   ","export const generatePaypalAccessToken = async (clientId: string, clientSecret: string, base: string) => {\n\n    try {\n        const auth = Buffer.from(`${clientId}:${clientSecret}`).toString(\"base64\");\n        const response = await fetch(`${base}/v1/oauth2/token`, {\n            method: \"POST\",\n            body: \"grant_type=client_credentials\",\n            headers: {\n                Authorization: `Basic ${auth}`,\n            },\n        });\n\n        const data = await response.json();\n        \n        return data.access_token;\n    } catch (error) {\n        console.error(\"Failed to generate Access Token:\", error);\n        throw error;\n    }\n};","import { VexorPaymentBody } from \"../../../types/requests\";\nimport { Vexor } from \"../../../methods\";\nimport { v4 as uuidv4 } from 'uuid';\nimport { generatePaypalAccessToken } from \"../../authorizations/paypal/generate-paypal-access-token\";\nimport { SUPPORTED_PLATFORMS } from \"../../../lib/constants\";\nconst createPaypalCheckout = async (\n    vexor: Vexor,\n    body: VexorPaymentBody\n) => {\n\n    try {\n\n        // Get the platform credentials\n        const platformCredentials = vexor.platforms?.paypal\n\n        if (!platformCredentials) {\n            throw new Error('Paypal credentials not found');\n        }\n\n        const paypalSecretKey = platformCredentials.secret_key\n\n        if (!paypalSecretKey) {\n            throw new Error('Paypal secret key not found');\n        }\n\n        const paypalClientId = platformCredentials.client_id\n\n        if (!paypalClientId) {\n            throw new Error('Paypal client id not found');\n        }\n\n        // Check if it's a sandbox or production environment\n        const isSandbox = platformCredentials?.sandbox === true;\n        const API_URL = isSandbox ? SUPPORTED_PLATFORMS.PAYPAL.base_url.sandbox : SUPPORTED_PLATFORMS.PAYPAL.base_url.production;\n\n\n\n        // Generate the access token\n        const accessToken = await generatePaypalAccessToken(paypalClientId, paypalSecretKey, API_URL);\n\n        // Make the API call to Paypal\n        const url = `${API_URL}/v2/checkout/orders`;\n\n        const itemsWithAmounts = body.items.map(item => ({\n            name: item.title,\n            unit_amount: {\n                currency_code: body.options?.currency || \"USD\",\n                value: item.unit_price.toFixed(2),\n            },\n            //custom_id: \n            quantity: item.quantity.toString(),\n            description: item.description || `${item.title} - ${item.quantity} unit(s)`,\n        }));\n\n        const itemTotal = itemsWithAmounts.reduce(\n            (sum, item) => sum + parseFloat(item.unit_amount.value) * parseInt(item.quantity),\n            0\n        );\n\n        const payload = {\n            intent: \"CAPTURE\",\n            purchase_units: [\n                {\n                    amount: {\n                        currency_code: body.options?.currency || \"USD\",\n                        value: itemTotal.toFixed(2),\n                        breakdown: {\n                            item_total: {\n                                currency_code: body.options?.currency || \"USD\",\n                                value: itemTotal.toFixed(2),\n                            },\n                        },\n                    },\n                    items: itemsWithAmounts,\n                },\n            ],\n            application_context: {\n                return_url: body.options?.successRedirect || 'http://localhost:3000',\n                cancel_url: body.options?.failureRedirect || 'http://localhost:3000',\n            },\n        };\n\n        const response = await fetch(url, {\n            method: \"POST\",\n            headers: {\n                \"Content-Type\": \"application/json\",\n                Authorization: `Bearer ${accessToken}`,\n            },\n            body: JSON.stringify(payload),\n        });\n\n\n        const jsonResponse = await response.json();\n\n\n        if (response.ok) {\n            const approveLink = jsonResponse.links.find((link: any) => link.rel === \"approve\");\n            return {\n                message: 'Paypal checkout created successfully',\n                payment_url: approveLink.href as string,\n                raw: jsonResponse,\n                identifier: jsonResponse.id as string\n            };\n\n        } else {\n            console.error(\"PayPal API Error:\", {\n                status: response.status,\n                statusText: response.statusText,\n                body: jsonResponse,\n                requestPayload: payload,\n            });\n            return {\n                payment_url: '',\n                message: jsonResponse.message || 'Failed to create PayPal order. Make sure that you are using the correct credentials for the environment. If your project is sandbox, make sure that you are using sandbox credentials. The identifier in this error is the paypal-debug-id',\n                raw: jsonResponse.details || [],\n                identifier: response.headers.get('paypal-debug-id') as string\n            };\n        }\n\n    } catch (error) {\n        console.error('Error creating Paypal checkout', error);\n        throw error;\n    }\n\n\n\n}\n\nexport default createPaypalCheckout;   ","interface GenerateTaloAccessTokenProps {\n    user_id: string;\n    client_id: string;\n    client_secret: string;\n    url: string;\n}\n\nexport const generateTaloAccessToken = async ({ user_id, client_id, client_secret, url }: GenerateTaloAccessTokenProps) => {\n\n    // Get talo token\n    const tokenResult = await fetch(`${url}/users/${user_id}/tokens`, {\n        method: 'POST',\n        headers: {\n            'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n            client_id,\n            client_secret\n        })\n    }).then(res => res.json());\n\n    return tokenResult;\n}","import { VexorPaymentBody } from \"../../../types/requests\";\nimport { Vexor } from \"../../../methods\";\nimport { VexorPaymentResponse } from \"../../../types/responses\";\nimport { generateTaloAccessToken } from \"../../authorizations/talo/generate-talo-access-token\";\nimport { SUPPORTED_PLATFORMS } from \"../../../lib/constants\";\nimport { v4 as uuidv4 } from 'uuid';\n\nconst createTaloCheckout = async (\n    vexor: Vexor,\n    body: VexorPaymentBody\n) => {\n\n    try {\n        // Get the platform credentials\n        const platformCredentials = vexor.platforms?.talo\n\n        if (!platformCredentials) {\n            throw new Error('MercadoPago credentials not found');\n        }\n\n        const taloUserId = platformCredentials.user_id\n        const taloClientId = platformCredentials.client_id\n        const taloClientSecret = platformCredentials.client_secret\n\n        if (!taloUserId || !taloClientId || !taloClientSecret) {\n            throw new Error('Talo credentials not found');\n        }\n\n        // Check if it's a sandbox or production environment\n        const isSandbox = platformCredentials?.sandbox === true;\n        const mode = isSandbox ? 'sandbox' : 'production';\n        const API_URL = isSandbox ? SUPPORTED_PLATFORMS.TALO.base_url.sandbox : SUPPORTED_PLATFORMS.TALO.base_url.production;\n\n\n        const tokenResult = await generateTaloAccessToken({\n            user_id: taloUserId,\n            client_id: taloClientId,\n            client_secret: taloClientSecret,\n            url: API_URL\n        });\n\n        if (!tokenResult.data?.token) {\n            return { \n                raw: 'talo_token_error', \n                message: 'Error getting Talo token.',\n                payment_url: 'null',\n                identifier: 'null'\n            };\n        }\n\n        const taloToken = tokenResult.data.token;\n\n        const itemsWithIds = body.items.map(item => ({\n            ...item,\n            id: item.id || uuidv4()\n        }));\n\n\n        // ============ Create talo payment object ============\n\n\n        const identifier = uuidv4();\n\n        // Get the total amount of the payment\n        const totalAmount = itemsWithIds.reduce((acc, item) => acc + item.unit_price * item.quantity, 0);\n\n        // Get the names of the items and the quantity\n        const itemNames = itemsWithIds.map(item => `${item.title} x${item.quantity}`).join(', ');\n\n        const paymentObject = {\n            price: {\n                currency: body.options?.currency || 'ARS',\n                amount: Number(totalAmount)\n            },\n            user_id: taloUserId,\n            redirect_url: body.options?.successRedirect || 'http://localhost:3000/success',\n            motive: itemNames,\n            external_id: identifier || uuidv4(),\n            webhook_url: ``,\n            payment_options: body.options?.paymentMethods || ['crypto']\n        }\n\n        if (platformCredentials.webhooks_url) {\n            paymentObject.webhook_url = `${platformCredentials.webhooks_url}?source_news=webhooks&mode=${mode}&vexorPlatform=talo`;\n        }\n\n          // Get talo payment link\n          const result = await fetch(`${API_URL}/payments/`, {\n            method: 'POST',\n            headers: {\n                'Content-Type': 'application/json',\n                'Authorization': `Bearer ${taloToken}`\n            },\n            body: JSON.stringify(paymentObject)\n        }).then(res => res.json());\n\n        if (result.code !== 200) {\n            return { \n                message: 'talo_payment_error', \n                raw: result, \n                payment_url: 'null',\n                identifier: 'null'\n            };\n        }\n\n\n        return { \n            message: 'Talo checkout created', \n            payment_url: result.data.payment_url as string, \n            raw: result, \n            identifier\n        }\n\n\n    } catch (error) {\n        console.error('Error creating Talo checkout', error);\n        throw error;\n    }\n}\n\nexport default createTaloCheckout;   ","import { VexorPaymentBody } from \"../../../types/requests\";\nimport { Vexor } from \"../../../methods\";\nimport { VexorPaymentResponse } from \"../../../types/responses\";\nimport { SUPPORTED_PLATFORMS } from \"../../../lib/constants\";\nimport { v4 as uuidv4 } from 'uuid';\nimport { generate_x_IdempotencyKey } from \"../../../lib/idemopotency-keygen\";\nimport { getSquareLocation } from \"../../authorizations/square/get-square-location\";\n\nconst createSquareCheckout = async (\n    vexor: Vexor,\n    body: VexorPaymentBody\n) => {\n\n\n    try {\n        // Get the platform credentials\n        const platformCredentials = vexor.platforms?.square\n\n        if (!platformCredentials) {\n            throw new Error('Square credentials not found');\n        }\n\n        const squareAccessToken = platformCredentials.access_token\n\n        if (!squareAccessToken) {\n            throw new Error('Square access token not found');\n        }\n\n        // Check if it's a sandbox or production environment\n        const isSandbox = platformCredentials?.sandbox === true;\n        const API_URL = isSandbox ? SUPPORTED_PLATFORMS.SQUARE.base_url.sandbox : SUPPORTED_PLATFORMS.SQUARE.base_url.production;\n        const mode = isSandbox ? 'sandbox' : 'production';\n\n        // Get Square location id\n\n        const locationsResponse = await getSquareLocation({\n            url: API_URL,\n            accessToken: squareAccessToken,\n        });\n\n        if (!locationsResponse.locations?.length) {\n            return {\n                raw: locationsResponse,\n                identifier: 'Square_token_error',\n                message: 'Error getting Square token.',\n                payment_url: '',\n            };\n        }\n\n        const squareLocationId = locationsResponse.locations[0].id;\n\n        // ============ Create Square payment object ============\n        const itemsWithIds = body.items.map(item => ({\n            ...item,\n            id: item.id || uuidv4()\n        }));\n\n        // Get the total amount of the payment\n        const totalAmount = itemsWithIds.reduce((acc, item) => acc + item.unit_price * item.quantity, 0);\n\n        // Get the names of the items and the quantity\n        const itemNames = itemsWithIds.map(item => `${item.title} x${item.quantity}`).join(', ');\n\n        const paymentObject = {\n            idempotency_key: generate_x_IdempotencyKey(),\n            quick_pay: {\n                name: itemNames,\n                price_money: {\n                    amount: Number(totalAmount * 100),\n                    currency: body.options?.currency || 'USD'\n                },\n                location_id: squareLocationId,\n            },\n            webhook_url: ''\n        }\n\n        if (platformCredentials.webhooks_url) {\n            paymentObject.webhook_url = `${platformCredentials.webhooks_url}?source_news=webhooks&mode=${mode}&vexorPlatform=Square`;\n        }\n\n        // ============ Create Square payment link ============\n        const result = await fetch(`${API_URL}/v2/online-checkout/payment-links`, {\n            method: 'POST',\n            headers: {\n                'Content-Type': 'application/json',\n                'Authorization': `Bearer ${squareAccessToken}`\n            },\n            mode: 'no-cors',\n            body: JSON.stringify(paymentObject)\n        }).then(res => res.json());\n\n        const identifier = result.related_resources.orders[0].id;\n\n        return {\n            message: 'Payment checkout created',\n            payment_url: result.payment_link.url,\n            raw: result,\n            identifier\n        }\n\n\n    } catch (error) {\n        console.error('Error creating Square checkout', error);\n        throw error;\n    }\n}\n\nexport default createSquareCheckout;   ","export         const generate_x_IdempotencyKey = () => {\n    return \" xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx\".replace(/[xy]/g, function (c) {\n        var r = Math.random() * 16 | 0, v = c === \"x\" ? r : (r & 0x3 | 0x8);\n        return v.toString(16);\n    });\n}","// Get Square location id\n\ninterface GetSquareLocationProps {\n    url: string;\n    accessToken: string;\n}\n\nexport const getSquareLocation = async ({url, accessToken}: GetSquareLocationProps) => {\n    try {\n        const locationsResponse = await fetch(`${url}/v2/locations`, {\n            method: 'GET',\n            headers: {\n                'Content-Type': 'application/json',\n                'Authorization': `Bearer ${accessToken}`\n            }\n        });\n\n        if (!locationsResponse?.ok) {\n            throw new Error(`HTTP error! status: ${locationsResponse.status} \\nMake sure the request is made from the server not from the client side`);\n        }\n\n        return await locationsResponse.json();\n    } catch (error) {\n        console.error('Error fetching Square location:', error);\n        throw error;\n    }\n}","import { Vexor } from \"@/methods\";\n\n const isOpenSource = (vexor: Vexor) => {\n    return Object.keys(vexor.platforms || {}).length > 0;\n}\n\nexport const VersionChecker = {\n    isOpenSource\n}","import { SUPPORTED_PLATFORMS } from \"@/lib/constants\";\nimport { SupportedVexorPlatform, VexorPaymentBody, VexorPaymentResponse } from \"@/methods\";\nimport {\n  createMercadoPagoCheckout,\n  createStripeCheckout,\n  createPaypalCheckout,\n  createTaloCheckout,\n  createSquareCheckout\n} from \"@/actions/checkouts\";\nimport { VersionChecker } from \"@/lib/version-validator\";\n\nexport const vexorPay = (vexor: any) => {\n\n  return Object.assign(\n    // Generic payment method\n    (params: { platform: SupportedVexorPlatform } & VexorPaymentBody) =>\n      vexor.createCheckout(params.platform, params),\n    // Platform-specific payment methods\n    {\n      mercadopago: (body: VexorPaymentBody) => vexor.createCheckout('mercadopago', body),\n      stripe: (body: VexorPaymentBody) => vexor.createCheckout('stripe', body),\n      paypal: (body: VexorPaymentBody) => vexor.createCheckout('paypal', body),\n      talo: (body: VexorPaymentBody) => vexor.createCheckout('talo', body),\n      square: (body: VexorPaymentBody) => vexor.createCheckout('square', body),\n    }\n  );\n}\n\nexport async function createCheckout(vexor: any, platform: SupportedVexorPlatform, body: VexorPaymentBody): Promise<VexorPaymentResponse> {\n\n  const isOpenSource = VersionChecker.isOpenSource(vexor);\n\n  // Vexor Open Source\n  if (isOpenSource) {\n\n    let response: VexorPaymentResponse;\n\n    // Call the platform-specific method\n    switch (platform) {\n      case SUPPORTED_PLATFORMS.MERCADO_PAGO.name:\n        response = await createMercadoPagoCheckout(vexor, body);\n        break;\n      case SUPPORTED_PLATFORMS.STRIPE.name:\n        response = await createStripeCheckout(vexor, body);\n        break;\n      case SUPPORTED_PLATFORMS.PAYPAL.name:\n        response = await createPaypalCheckout(vexor, body);\n        break;\n      case SUPPORTED_PLATFORMS.TALO.name:\n        response = await createTaloCheckout(vexor, body);\n        break;\n      case SUPPORTED_PLATFORMS.SQUARE.name:\n        response = await createSquareCheckout(vexor, body);\n        break;\n      default:\n        throw new Error(`Unsupported platform: ${platform}`);\n    }\n\n    return response;\n\n  } else {\n\n    // Vexor Cloud \n    const response = await fetch(`${vexor.apiUrl}/payments`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n        'x-vexor-key': vexor.publishableKey,\n        'x-vexor-platform': platform,\n        'x-vexor-project-id': vexor.projectId,\n      },\n      body: JSON.stringify(body),\n    });\n\n    const data = await response.json();\n\n    if (!response.ok) {\n      const errorMessage = data.message || 'An unknown error occurred';\n      throw new Error(`Payment request failed: ${errorMessage}`);\n    }\n\n    return data;\n  }\n}","import crypto from \"crypto\";\n\ninterface SignatureVerificationProps {\n    x_signature: string;\n    mercadopagoWebhookSecret: string;\n    data_id: string;\n    x_request_id: string;\n}\n\nexport const isValidMercadoPagoSignature = ({\n    x_signature,\n    mercadopagoWebhookSecret,\n    data_id,\n    x_request_id\n}: SignatureVerificationProps) => {\n    const ts = x_signature?.split(\",\")?.[0]?.split(\"=\")?.[1];\n    const hash = x_signature?.split(\",\")?.[1]?.split(\"=\")?.[1];\n\n    const manifest = `id:${data_id};request-id:${x_request_id};ts:${ts};`\n    let isValidSignature = false;\n\n    const cyphed_signature = crypto\n        .createHmac(\"sha256\", mercadopagoWebhookSecret)\n        .update(manifest)\n        .digest(\"hex\");\n\n    if (cyphed_signature === hash) {\n        isValidSignature = true;\n    }\n\n    return isValidSignature;\n}","import { isValidMercadoPagoSignature } from \"@/actions/authorizations/mercadopago/verify-mercadopago-signature\";\nimport { SUPPORTED_PLATFORMS } from \"@/lib/constants\";\nimport { VexorWebhookResponse } from \"@/types/responses\";\nimport crypto from \"crypto\";\nexport const handleMercadoPagoWebhook = async (vexor: any, req: any) => {\n\n    const url = new URL(req.url);\n    const queryParams = new URLSearchParams(url.searchParams);\n\n    const data_id = queryParams.get(\"data.id\");\n\n    // This is used to validate notifications (only works in production environment)\n    const x_signature = req.headers.get(\"x-signature\");\n    const x_request_id = req.headers.get(\"x-request-id\");\n    const body = await req.json();\n\n    try {\n\n        // Get the platform credentials\n        const platformCredentials = vexor.platforms?.mercadopago\n\n        if (!platformCredentials) {\n            throw new Error('MercadoPago credentials not found');\n        }\n\n        const mercadopagoAccessToken = platformCredentials.access_token\n        const mercadopagoWebhookSecret = platformCredentials.webhook_secret\n\n        if (!mercadopagoAccessToken) {\n            throw new Error('MercadoPago access token not found');\n        }\n\n        if (!mercadopagoWebhookSecret) {\n            throw new Error('MercadoPago webhook secret not found');\n        }\n\n        // Check if it's a sandbox or production environment\n        const isSandbox = platformCredentials?.sandbox === true;\n        const API_URL = isSandbox ? SUPPORTED_PLATFORMS.MERCADO_PAGO.base_url.sandbox : SUPPORTED_PLATFORMS.MERCADO_PAGO.base_url.production;\n\n\n        if ((!isSandbox) && (!x_signature || !x_request_id || !data_id)) {\n            console.log('Invalid request. The request does not contain the required headers.');\n            return {\n                message: 'Invalid request. The request does not contain the required headers.',\n                status: 'error',\n                transmissionId: x_request_id || '',\n                identifier: '',\n                timeStamp: new Date().toISOString(),\n                orderId: '',\n                eventType: '',\n                platform: SUPPORTED_PLATFORMS.MERCADO_PAGO.name,\n                resource: null,\n            } as VexorWebhookResponse\n        }\n\n        // Check if the signature is valid in production environment\n        if ((body.live_mode || !isSandbox)) {\n\n            const isValidSignature = isValidMercadoPagoSignature({\n                x_signature,\n                mercadopagoWebhookSecret,\n                data_id: data_id as string,\n                x_request_id\n            });\n\n            if (!isValidSignature) {\n                throw new Error('Invalid signature');\n            }\n        }\n\n        let payment_url\n\n        switch (body.entity) {\n            case 'preapproval_plan':\n                payment_url = `https://api.mercadopago.com/preapproval_plan/${body.data.id}`\n                break;\n            case 'preapproval':\n                payment_url = `https://api.mercadopago.com/preapproval/${body.data.id}`\n                break;\n            default:\n                payment_url = `https://api.mercadopago.com/v1/payments/${body.data.id}`\n                break;\n        }\n\n        // Get payment information\n        const payment_response = await fetch(payment_url, {\n            method: \"GET\",\n            headers: {\n                \"Content-Type\": \"application/json\",\n                \"Authorization\": `Bearer ${mercadopagoAccessToken}`\n            }\n        });\n\n        let payment_data = await payment_response.json();\n        let identifier = ''\n        let responseMessage = 'Event processed';\n        let status = 'pending'\n\n        console.log('PAYMENT DATA', payment_data);\n\n        switch (body.action) {\n\n\n            case 'payment.created':\n                //console.log('Payment created with mercadopago transaction id:', body.data.id);\n                responseMessage = 'Payment created with mercadopago transaction id: ' + body.data.id;\n                identifier = payment_data.metadata?.identifier || payment_data.external_reference || ''\n\n\n                // =============================\n                // ===💳==== CHECKOUTS ====💳===\n                // =============================\n\n                // Check if the payment is approved\n                if (payment_data.status === 'approved') {\n                    status = 'paid'\n                }\n\n\n\n                // =================================\n                // ===🔄==== SUBSCRIPTIONS ====🔄===\n                // =================================\n\n                // Check if the payment is a subscription\n                if (payment_data.point_of_interaction?.type === 'SUBSCRIPTIONS') {\n                    // Get payment information\n                    const subscription_response = await fetch(`https://api.mercadopago.com/v1/payments/${body.data.id}`, {\n                        method: \"GET\",\n                        headers: {\n                            \"Content-Type\": \"application/json\",\n                            \"Authorization\": `Bearer ${mercadopagoAccessToken}`\n                        }\n                    });\n\n                    const subscription_data = await subscription_response.json();\n\n                    // Get preapproval information\n                    const preapproval_response = await fetch(`https://api.mercadopago.com/preapproval/${subscription_data.metadata.preapproval_id}`, {\n                        method: \"GET\",\n                        headers: {\n                            \"Content-Type\": \"application/json\",\n                            \"Authorization\": `Bearer ${mercadopagoAccessToken}`\n                        }\n                    });\n\n                    const preapproval_data = await preapproval_response.json();\n                    responseMessage = 'Subscription created with mercadopago transaction id: ' + body.data.id;\n                    identifier = preapproval_data.metadata?.identifier || preapproval_data.external_reference || ''\n                }\n\n                break;\n            case 'payment.updated':\n\n                //console.log('Payment updated with mercadopago transaction id:', body.data.id);\n                responseMessage = 'Payment updated with mercadopago transaction id: ' + body.data.id;\n                if (payment_data.status) {\n                    status = payment_data.status\n                }\n                identifier = payment_data.metadata?.identifier || payment_data.external_reference || ''\n                break;\n            case 'created':\n\n                //console.log('Subscription preapproval created with mercadopago transaction id:', body.data.id);\n                responseMessage = 'Subscription preapproval created with mercadopago transaction id: ' + body.data.id;\n                identifier = payment_data.metadata?.identifier || payment_data.external_reference || ''\n                if (payment_data.status) {\n                    status = payment_data.status\n                }\n                if (body.entity !== 'preapproval_plan' && body.entity !== 'preapproval') {\n\n                    if (body.entity === 'authorized_payment') {\n                        // Get preapproval information\n                        const authorized_payment_response = await fetch(`https://api.mercadopago.com/authorized_payments/${body.data.id}`, {\n                            method: \"GET\",\n                            headers: {\n                                \"Content-Type\": \"application/json\",\n                                \"Authorization\": `Bearer ${mercadopagoAccessToken}`\n                            }\n                        });\n\n                        const authorized_payment = await authorized_payment_response.json();\n\n                        responseMessage = `Subscription payment authorization created with ID: ${body.data.id}. \\nDebit date: ${new Date(authorized_payment.debit_date).toLocaleDateString()}`;\n                        identifier = authorized_payment.metadata?.identifier || authorized_payment.external_reference || ''\n                        payment_data = authorized_payment\n                        status = authorized_payment.status\n\n                    } else {\n                        // Get preapproval information\n                        const no_entity_response = await fetch(`https://api.mercadopago.com/v1/payments/${body.data.id}`, {\n                            method: \"GET\",\n                            headers: {\n                                \"Content-Type\": \"application/json\",\n                                \"Authorization\": `Bearer ${mercadopagoAccessToken}`\n                            }\n                        });\n\n\n                        const no_entity_data = await no_entity_response.json();\n\n                        if (no_entity_data.status === 404) {\n                            status = 'pending'\n                            responseMessage = 'Subscription preapproval created with mercadopago transaction id: ' + body.data.id + ' but the subscription was not found in Mercadopago. This may occur if the user has not paid yet, even though, mercadopago emits an update. ⚠️ THIS RESPONSE WILL NOT CONTAIN ANY IDENTIFIER.'\n                        }\n\n                        console.log('PREAPPROVAL DATA', no_entity_data);\n\n                        identifier = no_entity_data.metadata?.identifier || no_entity_data.external_reference || ''\n                        payment_data = no_entity_data\n                    }\n\n\n                }\n                break;\n\n            case 'updated':\n\n                responseMessage = 'Subscription updated with mercadopago transaction id: ' + body.data.id;\n                //console.log('PAYMENT DATA', payment_data);\n                if (payment_data.status) {\n                    status = payment_data.status\n                }\n                identifier = payment_data.metadata?.identifier || payment_data.external_reference || ''\n                if (payment_data.status === 404) {\n                    status = 'pending'\n                    responseMessage = 'Subscription update received with mercadopago transaction id: ' + body.data.id + ' but the subscription was not found in Mercadopago. This may occur if the user has not paid yet, even though, mercadopago emits an update. ⚠️ THIS RESPONSE WILL NOT CONTAIN ANY IDENTIFIER.'\n                }\n\n                if (payment_data.status === 'authorized' && payment_data.next_payment_date > new Date()) {\n                    status = payment_data.status\n                }\n                identifier = payment_data.metadata?.identifier || payment_data.external_reference || ''\n                break;\n            default:\n                console.error('Unhandled event type:', body.action);\n\n                responseMessage = 'Mercadopago events supported: payment.created, created, updated, payment.updated'\n        }\n\n\n\n        return {\n            message: responseMessage,\n            status: status,\n            transmissionId: x_request_id || '',\n            identifier: identifier,\n            timeStamp: new Date().toISOString(),\n            orderId: body.data.id as string,\n            eventType: body.action as string,\n            platform: SUPPORTED_PLATFORMS.MERCADO_PAGO.name,\n            resource: payment_data,\n        } as VexorWebhookResponse\n\n    } catch (error) {\n        console.error(error);\n        return {\n            message: 'Error processing MercadoPago webhook',\n            status: 'error',\n            transmissionId: x_request_id || '',\n            identifier: '',\n            timeStamp: new Date().toISOString(),\n            orderId: '',\n            eventType: '',\n            platform: SUPPORTED_PLATFORMS.MERCADO_PAGO.name,\n            resource: null,\n        } as VexorWebhookResponse\n    }\n}\n\n","import { SUPPORTED_PLATFORMS } from \"@/lib/constants\";\nimport { Vexor } from \"@/methods\";\nimport { VexorWebhookResponse } from \"@/types/responses\";\nimport Stripe from \"stripe\";\n\nasync function getSubscriptionWithRetry(\n    stripe: Stripe,\n    subscriptionId: string,\n    maxRetries = 10\n): Promise<Stripe.Subscription> {\n    for (let i = 0; i < maxRetries; i++) {\n        const subscription = await stripe.subscriptions.retrieve(subscriptionId);\n        if (subscription.metadata?.identifier) {\n            return subscription;\n        }\n        // Wait for 1 second before retrying (increases with each retry)\n        await new Promise(resolve => setTimeout(resolve, 1000 * (i + 1)));\n    }\n    throw new Error('Subscription metadata not available after retries');\n}\n\n\nexport const handleStripeWebhook = async (vexor: Vexor, req: any) => {\n\n    const request = await req.text();\n    const body = JSON.parse(request);\n\n    const signature = req.headers.get('Stripe-Signature') as string;\n\n    if (!signature) {\n        return {\n            message: 'Missing signature',\n            status: 'error',\n            transmissionId: '',\n            identifier: '',\n            timeStamp: new Date().toISOString(),\n            orderId: '',\n            eventType: '',\n            platform: SUPPORTED_PLATFORMS.STRIPE.name,\n            resource: null,\n        } as VexorWebhookResponse\n    }\n\n    try {\n\n        // Get the platform credentials\n        const platformCredentials = vexor.platforms?.stripe\n\n        if (!platformCredentials) {\n            //  throw new Error('Stripe credentials not found');\n        }\n\n        const stripePublicKey = platformCredentials?.public_key\n        const stripeSecretKey = platformCredentials?.secret_key\n        const stripeWebhookSecrets = platformCredentials?.webhook_secrets\n\n        if (!stripePublicKey) {\n            throw new Error('Stripe public key not found');\n        }\n\n        if (!stripeSecretKey) {\n            throw new Error('Stripe secret key not found');\n        }\n\n        if (!stripeWebhookSecrets?.length) {\n            throw new Error('Stripe webhook secrets not found');\n        }\n\n        // Check if it's a sandbox or production environment\n        const isSandbox = platformCredentials?.sandbox === true;\n        const API_URL = isSandbox ? SUPPORTED_PLATFORMS.STRIPE.base_url.sandbox : SUPPORTED_PLATFORMS.STRIPE.base_url.production;\n\n        let event: Stripe.Event | null = null;\n        const stripe = new Stripe(stripeSecretKey, {\n            typescript: true,\n        });\n\n        // Try each webhook secret until one works or all fail (you can have multiple webhooks secrets in Stripe for example: one for your account and one for connected -marketplace- accounts)\n        for (const webhookSecret of stripeWebhookSecrets) {\n            try {\n                event = stripe.webhooks.constructEvent(\n                    request,\n                    signature,\n                    webhookSecret\n                );\n                break; // If we get here, we found a working webhook secret\n            } catch (err) {\n                console.log('Webhook signature verification failed with a secret, trying next one if available');\n                continue;\n            }\n        }\n\n        if (!event) {\n            console.error('Webhook signature verification failed with all secrets');\n            return {\n                message: 'Webhook signature verification failed',\n                status: 'error',\n                transmissionId: '',\n                identifier: '',\n                timeStamp: new Date().toISOString(),\n                orderId: '',\n                eventType: '',\n                platform: SUPPORTED_PLATFORMS.STRIPE.name,\n                resource: null,\n            } as VexorWebhookResponse\n        }\n\n\n        // Check if the event is a subscription checkout\n        const isSubscriptionCheckout = body.data.object.billing_reason === 'subscription_create' || body.data.object.mode === 'subscription';\n\n\n        let responseMessage = 'Event processed';\n        let status = 'pending'\n        let identifier = '';\n\n        switch (event.type) {\n            case 'checkout.session.completed':\n                console.log('Payment created with order id:', body.data.object.metadata.identifier);\n                responseMessage = 'Payment created with order id: ' + body.data.object.metadata.identifier;\n                status = body.data.object.payment_status;\n                identifier = body.data.object.metadata.identifier;\n\n                if (isSubscriptionCheckout) {\n                    const subscriptionId = body.data.object.subscription;\n\n\n                    // Update the Subscription with the metadata from the Checkout Session\n                    const subscription = await stripe.subscriptions.update(subscriptionId, {\n                        metadata: {\n                            identifier: body.data.object.metadata.identifier\n                        }\n                    });\n\n                    console.log('Updated subscription:', subscription);\n\n\n                    responseMessage = 'Subscription created and updated with identifier: ' + body.data.object.metadata.identifier;\n\n                    identifier = body.data.object.metadata.identifier;\n\n                }\n\n                break;\n            case 'invoice.payment_succeeded':\n                console.log('Payment succeeded with invoice id:', body.data.object.metadata.identifier);\n                identifier = body.data.object.metadata.identifier;\n\n                responseMessage = 'Payment succeeded with invoice id: ' + body.data.object.metadata.identifier;\n                status = body.data.object.payment_status;\n                if (isSubscriptionCheckout) {\n                    const subscriptionId = body.data.object.subscription;\n                    try {\n                        const subscription = await getSubscriptionWithRetry(stripe, subscriptionId);\n                        console.log('Subscription:', subscription);\n                        responseMessage = 'Subscription payment succeeded and updated with id: ' + subscription.metadata.identifier;\n                        body.data.object.metadata.identifier = subscription.metadata.identifier;\n                        identifier = subscription.metadata.identifier;\n                    } catch (error) {\n                        console.error('Failed to get subscription metadata:', error);\n                        // You might want to handle this case differently\n                        status = 'pending';\n                        responseMessage = 'Subscription payment processed, but metadata not yet available';\n                    }\n                }\n                break;\n            case 'account.updated':\n                console.log('Account updated:', body.data.object);\n                status = 'success';\n                responseMessage = 'Account updated with id: ' + body.data.object.metadata.identifier;\n                identifier = body.data.object.metadata.identifier;\n                break;\n            default:\n                console.error('Unhandled event type:', event.type);\n                return {\n                    message: 'Stripe events supported: checkout.session.completed, invoice.payment_succeeded. \\nUsing vexor.webhook() with unsupported events may result in unnecessary operations charges. Please ensure you only use supported events to optimize your usage.',\n                    status: 'error',\n                    transmissionId: '',\n                    identifier: '',\n                    timeStamp: new Date().toISOString(),\n                    orderId: '',\n                    eventType: '',\n                    platform: SUPPORTED_PLATFORMS.STRIPE.name,\n                    resource: null,\n                } as VexorWebhookResponse\n        }\n\n\n\n        return {\n            message: responseMessage,\n            status: status,\n            transmissionId: body.data.object.id as string,\n            identifier: identifier,\n            timeStamp: new Date().toISOString(),\n            orderId: body.data.object.payment_intent as string,\n            eventType: event.type as string,\n            platform: SUPPORTED_PLATFORMS.STRIPE.name,\n            resource: body.data.object,\n        } as VexorWebhookResponse\n\n    } catch (error) {\n        console.error(error);\n        return {\n            message: 'Error processing Stripe webhook',\n            status: 'error',\n            transmissionId: '',\n            identifier: '',\n            timeStamp: new Date().toISOString(),\n            orderId: '',\n            eventType: '',\n            platform: SUPPORTED_PLATFORMS.STRIPE.name,\n            resource: null,\n        } as VexorWebhookResponse\n    }\n}\n\n","export function mapAuthAlgo(algo: string): string {\n    switch (algo.toUpperCase()) {\n        case 'SHA256WITHRSA':\n            return 'RSA-SHA256';\n        case 'SHA1WITHRSA':\n            return 'RSA-SHA1';\n        default:\n            throw new Error(`Unsupported authentication algorithm: ${algo}`);\n    }\n}","import https from 'https';\n\nexport async function downloadAndCacheCertificate(url: string): Promise<string> {\n    // Implement caching logic here if needed\n    return new Promise((resolve, reject) => {\n        https.get(url, (res) => {\n            let data = '';\n            res.on('data', (chunk) => {\n                data += chunk;\n            });\n            res.on('end', () => {\n                resolve(data);\n            });\n        }).on('error', (err) => {\n            reject(err);\n        });\n    });\n}\n","import { mapAuthAlgo } from \"@/lib/algorithm-map\";\nimport { downloadAndCacheCertificate } from \"./certification\";\nimport crypto from 'crypto';\n\nexport async function verifyPaypalSignature(message: string, transmissionSig: string, certUrl: string, authAlgo: string): Promise<boolean> {\n    try {\n        // Download and cache the certificate\n        const cert = await downloadAndCacheCertificate(certUrl);\n\n        // Map PayPal's auth algo to Node.js crypto algo\n        const cryptoAlgo = mapAuthAlgo(authAlgo);\n\n        // Create a verification object\n        const verifier = crypto.createVerify(cryptoAlgo);\n\n        // Add the original message to the verifier\n        verifier.update(message);\n\n        // Create buffer from base64-encoded signature\n        const signatureBuffer = Buffer.from(transmissionSig, 'base64');\n\n        // Verify the signature\n        return verifier.verify(cert, signatureBuffer);\n    } catch (error) {\n        console.error('Error verifying signature:', error);\n        return false;\n    }\n}","import { VexorPaymentBody } from \"@/types/requests\";\nimport { Vexor } from \"@/methods\";\nimport { generatePaypalAccessToken } from \"@/actions/authorizations/paypal/generate-paypal-access-token\";\nimport { SUPPORTED_PLATFORMS } from \"@/lib/constants\";\n\nexport const capturePaypalPayment = async (vexor: Vexor, orderId: string) => {\n\n\n    try {\n\n        const paypalSecretKey = vexor.platforms?.paypal?.secret_key\n\n    if (!paypalSecretKey) {\n        throw new Error('Paypal secret key not found');\n    }   \n\n    const paypalClientId = vexor.platforms?.paypal?.client_id\n\n    if (!paypalClientId) {\n        throw new Error('Paypal client id not found');\n    }\n\n    const isSandbox = vexor.platforms?.paypal?.sandbox === true;\n    const API_URL = isSandbox ? SUPPORTED_PLATFORMS.PAYPAL.base_url.sandbox : SUPPORTED_PLATFORMS.PAYPAL.base_url.production;\n\n    const paypalAccessToken = await generatePaypalAccessToken(paypalClientId, paypalSecretKey, API_URL)\n\n    const response = await fetch(`${API_URL}/v2/checkout/orders/${orderId}/capture`, {\n        method: 'POST',\n        headers: {\n            'Content-Type': 'application/json',\n            'Authorization': `Bearer ${paypalAccessToken}`,\n        },\n    });\n\n    return response;\n    } catch (error) {\n        console.error('Error capturing paypal payment:', error);\n        throw new Error('Error capturing paypal payment');\n    }\n\n}","import { verifyPaypalSignature } from \"@/actions/authorizations/paypal/verify-paypal-signature\";\nimport { capturePaypalPayment } from \"@/actions/captures/paypal/capture-paypal-payment\";\nimport { SUPPORTED_PLATFORMS } from \"@/lib/constants\";\nimport { SupportedVexorPlatform, Vexor } from \"@/methods\";\nimport { VexorWebhookResponse } from \"@/types/responses\";\nimport crc32 from \"buffer-crc32\";\nimport crypto from \"crypto\";\n\nexport const handlePaypalWebhook = async (vexor: Vexor, req: any) => {\n\n\n    const request = await req.text();\n    const headersList = req.headers;\n    const transmissionId = headersList.get('paypal-transmission-id');\n    const timeStamp = headersList.get('paypal-transmission-time');\n    const certUrl = headersList.get('paypal-cert-url');\n    const authAlgo = headersList.get('paypal-auth-algo');\n    const transmissionSig = headersList.get('paypal-transmission-sig');\n    const crc = parseInt(\"0x\" + crc32(Buffer.from(request)).toString('hex'));\n\n    try {\n\n\n        const body = JSON.parse(request)\n\n        // Get the platform credentials\n        const platformCredentials = vexor.platforms?.paypal\n\n        if (!platformCredentials) {\n            throw new Error('Paypal credentials not found');\n        }\n\n        const paypalSecretKey = platformCredentials.secret_key\n        const paypalWebhookId = platformCredentials.webhook_id\n\n        if (!paypalSecretKey) {\n            throw new Error('Paypal secret key not found');\n        }\n\n        if (!paypalWebhookId) {\n            throw new Error('Paypal webhook id not found');\n        }\n\n        let orderId\n        switch (body.event_type) {\n            case 'CHECKOUT.ORDER.APPROVED':\n                orderId = body.resource.id;\n                break;\n            case 'PAYMENT.CAPTURE.COMPLETED':\n                orderId = body.resource.supplementary_data?.related_ids?.order_id;\n                break;\n            case 'BILLING.SUBSCRIPTION.ACTIVATED':\n                orderId = body.resource.id;\n                break;\n            case 'BILLING.SUBSCRIPTION.REACTIVATED':\n                orderId = body.resource.id;\n                break;\n            case 'PAYMENT.SALE.COMPLETED':\n                orderId = body.resource.billing_agreement_id;\n                break;\n            default:\n                console.error('Unhandled event type:', body.event_type);\n                return {\n                    message: 'Unhandled event type: ' + body.event_type,\n                    status: 'error',\n                    platform: SUPPORTED_PLATFORMS.PAYPAL.name as SupportedVexorPlatform,\n                    resource: null,\n                    eventType: body.event_type,\n                    transmissionId: transmissionId || '',\n                    identifier: '',\n                    timeStamp: new Date().toISOString(),\n                    orderId: '',\n                }\n        }\n\n        // Create the message to verify the signature\n        const message = `${transmissionId}|${timeStamp}|${paypalWebhookId}|${crc}`;\n\n        // Verify the signature\n        const isValidSignature = await verifyPaypalSignature(message, transmissionSig, certUrl, authAlgo);\n\n        if (!isValidSignature) {\n            throw new Error('Invalid signature');\n        }\n\n\n\n        let status = 'pending'\n        let responseMessage = 'Event processed';\n        switch (body.event_type) {\n            case 'CHECKOUT.ORDER.APPROVED':\n                const captureResponse = await capturePaypalPayment(vexor, body.resource.id)\n                const data = await captureResponse.json();\n                //console.log('Payment capture response:', data);\n                if (data.error) {\n                    responseMessage = 'Error capturing payment: ' + data.error;\n                } else {\n                    responseMessage = 'Payment approved with order id: ' + orderId;\n                }\n                break;\n            case 'PAYMENT.CAPTURE.COMPLETED':\n                //console.log('Payment captured with order id:', orderId);\n                responseMessage = 'Payment captured with order id: ' + orderId;\n                status = 'paid'\n                break;\n            case 'BILLING.SUBSCRIPTION.ACTIVATED':\n                //console.log('Subscription activated with id:', orderId);\n                responseMessage = 'Subscription activated with id: ' + orderId;\n                status = 'active';\n                break;\n            case 'PAYMENT.SALE.COMPLETED':\n                //console.log('Subscription payment completed with id:', orderId);\n                responseMessage = 'Subscription payment completed with id: ' + orderId;\n                status = 'paid';\n                break;\n            case 'BILLING.SUBSCRIPTION.REACTIVATED':\n                //console.log('Subscription reactivated with id:', orderId);\n                responseMessage = 'Subscription reactivated with id: ' + orderId;\n                status = 'active';\n                break;\n            case 'PAYMENT.CAPTURE.REFUNDED':\n                //console.log('Payment captured refunded with id:', orderId);\n                responseMessage = 'Payment captured refunded with id: ' + orderId;\n                status = 'refunded';\n                break;\n            default:\n                //console.log('Unhandled event type:', body.event_type);\n                responseMessage = 'Unhandled event type: ' + body.event_type;\n        }\n\n\n        const response: VexorWebhookResponse = {\n            message: responseMessage,\n            status: status,\n            platform: SUPPORTED_PLATFORMS.PAYPAL.name as SupportedVexorPlatform,\n            identifier: orderId as string,\n            transmissionId: transmissionId as string,\n            timeStamp: timeStamp as string,\n            orderId: orderId as string,\n            eventType: body.event_type,\n            resource: body.resource,\n        }\n\n        return response;\n    } catch (error) {\n        console.error(error);\n        return {\n            message: 'Error processing Paypal webhook',\n            status: 'error',\n            transmissionId: transmissionId || '',\n            identifier: '',\n            timeStamp: new Date().toISOString(),\n            orderId: '',\n            eventType: '',\n            platform: SUPPORTED_PLATFORMS.PAYPAL.name as SupportedVexorPlatform,\n            resource: 'null',\n        } as VexorWebhookResponse\n    }\n}","import { generateTaloAccessToken } from \"@/actions/authorizations/talo/generate-talo-access-token\";\nimport { SUPPORTED_PLATFORMS } from \"@/lib/constants\";\nimport { Vexor } from \"@/methods\";\n\nexport const retrieveTaloOperation = async (vexor: Vexor, operationId: string) => {\n\n    // Get the platform credentials\n    const platformCredentials = vexor.platforms?.talo\n\n    if (!platformCredentials) {\n        throw new Error('Talo credentials not found');\n    }\n\n    // Check if it's a sandbox or production environment\n    const isSandbox = platformCredentials?.sandbox === true;\n    const mode = isSandbox ? 'sandbox' : 'production';\n    const API_URL = isSandbox ? SUPPORTED_PLATFORMS.TALO.base_url.sandbox : SUPPORTED_PLATFORMS.TALO.base_url.production;\n\n\n    const tokenResult = await generateTaloAccessToken({\n        user_id: platformCredentials.user_id,\n        client_id: platformCredentials.client_id,\n        client_secret: platformCredentials.client_secret,\n        url: API_URL\n    });\n\n    if (!tokenResult.data?.token) {\n       throw new Error('Talo token not found');\n    }\n\n    const taloToken = tokenResult.data.token;\n\n    // Get talo payment\n    const result = await fetch(`${API_URL}/payments/${operationId}`, {\n        method: 'GET',\n        headers: {\n            'Content-Type': 'application/json',\n            'Authorization': `Bearer ${taloToken}`\n        },\n    }).then(res => res.json());\n\n    return result;\n}","import { retrieveTaloOperation } from \"@/actions/retrievals/talo/retrieve-talo-operation\";\nimport { SUPPORTED_PLATFORMS } from \"@/lib/constants\";\nimport { Vexor } from \"@/methods\";\nimport { SupportedVexorPlatform } from \"@/types/platforms\";\nimport { VexorWebhookResponse } from \"@/types/responses\";\n\nexport const handleTaloWebhook = async (vexor: Vexor, req: any) => {\n    try {\n        const request = await req.text();\n        const body = JSON.parse(request);\n\n        // Get the platform credentials\n        const platformCredentials = vexor.platforms?.talo;\n\n        if (!platformCredentials) {\n            throw new Error('Talo credentials not found');\n        }\n\n        const taloUserId = platformCredentials.user_id;\n        const taloClientId = platformCredentials.client_id;\n        const taloClientSecret = platformCredentials.client_secret;\n\n        if (!taloUserId || !taloClientId || !taloClientSecret) {\n            throw new Error('Talo credentials are incomplete');\n        }\n\n        // Get talo payment status\n        const taloPaymentData = await retrieveTaloOperation(vexor, body.data?.id || body.paymentId);\n\n        let status = taloPaymentData.data.status\n\n        if (status === 'SUCCESS' || status === 'OVERPAID') {\n            status = 'paid'\n        }\n\n        const response: VexorWebhookResponse = {\n            message: body.message,\n            status: status,\n            platform: SUPPORTED_PLATFORMS.TALO.name as SupportedVexorPlatform,\n            identifier: taloPaymentData.data.external_id,\n            transmissionId: body.paymentId,\n            timeStamp: new Date().toISOString(),\n            orderId: taloPaymentData.data.id,\n            eventType: body.message,\n            resource: taloPaymentData,\n        }\n\n        return response;\n\n    } catch (error) {\n        console.log('Talo webhook error:', error);\n        throw error; // Re-throw the actual error instead of creating a new one\n    }\n}","import crypto from 'crypto';\n\ninterface SignatureVerificationProps {\n    request: string;\n    webhooks_url: string;\n    webhook_signature_key: string;\n    signature: string;\n}\n\nexport const verifySquareSignature = ({\n    request,\n    webhooks_url,\n    webhook_signature_key,\n    signature\n}: SignatureVerificationProps) => {\n\n    try {\n        // Perform UTF-8 encoding to bytes\n        let payloadBytes = Buffer.from(webhooks_url + request, 'utf-8');\n        let signatureKeyBytes = Buffer.from(webhook_signature_key, 'utf-8');\n\n        // Compute the hash value\n        const hmac = crypto.createHmac('sha256', signatureKeyBytes);\n        hmac.update(payloadBytes);\n\n        // Compare the computed hash vs the value in the signature header\n        const hashBase64 = hmac.digest('base64');\n        const isValid = hashBase64 === signature;\n\n        if (!isValid) {\n            return false;\n        }\n\n        return true;\n    } catch (error) {\n        console.error('Error verifying Square signature:', error);\n        return false;\n    }\n}","import { verifySquareSignature } from \"@/actions/authorizations/square/verify-square-signature\";\nimport { SUPPORTED_PLATFORMS } from \"@/lib/constants\";\nimport { SupportedVexorPlatform, Vexor } from \"@/methods\";\nimport { VexorWebhookResponse } from \"@/types/responses\";\n\nexport const handleSquareWebhook = async (vexor: Vexor, req: any) => {\n\n    const request = await req.text();\n    const signature = req.headers.get('x-square-hmacsha256-signature') as string;\n\n    try {\n\n\n        const body = JSON.parse(request)\n\n        // Get the platform credentials\n        const platformCredentials = vexor.platforms?.square\n\n        if (!platformCredentials) {\n            throw new Error('Paypal credentials not found');\n        }\n\n        const squareAccessToken = platformCredentials.access_token\n        const squareApplicationId = platformCredentials.application_id\n        const squareWebhooksUrl = platformCredentials.webhooks_url\n        const squareWebhookSignatureKey = platformCredentials.webhook_signature_key\n\n        if (!squareAccessToken) {\n            throw new Error('Square access token not found');\n        }\n\n        if (!squareApplicationId) {\n            throw new Error('Square application id not found');\n        }\n\n        if (!squareWebhooksUrl) {\n            throw new Error('Square webhooks url not found');\n        }\n\n        if (!squareWebhookSignatureKey) {\n            throw new Error('Square webhook signature key not found');\n        }\n\n        // Verify the signature\n        const isValidSignature = verifySquareSignature({\n            request,\n            signature,\n            webhook_signature_key: squareWebhookSignatureKey,\n            webhooks_url: squareWebhooksUrl,\n        });\n\n        if (!isValidSignature) {\n            throw new Error('Invalid signature');\n        }\n\n \n        let identifier = '';\n        let status = '';\n        switch (body.type) {\n            case 'payment.updated':\n                identifier = body.data.object.payment.order_id;\n                status = body.data.object.payment.status;\n                //console.log('Payment updated', body.data.object.payment.order_id);\n                break;\n\n            case 'order.updated':\n                identifier = body.data.object.order_updated.order_id;\n                status = body.data.object.order_updated.state;\n                //console.log('Order updated', body.data.object.order_updated.order_id);\n                break;\n\n            default:\n                console.error('Unhandled event type:', body.type);\n\n                return {\n                    message: 'Unhandled event type: ' + body.type,\n                    status: 'unhandled_event_type',\n                    platform: SUPPORTED_PLATFORMS.SQUARE.name as SupportedVexorPlatform,\n                    identifier: '',\n                    transmissionId: '',\n                    timeStamp: new Date().toISOString(),\n                    orderId: '',\n                    eventType: '',\n                    resource: 'null',\n                } as VexorWebhookResponse\n        }\n\n\n        let responseMessage = 'Event processed';\n\n        const response: VexorWebhookResponse = {\n            message: responseMessage,\n            status: status,\n            platform: SUPPORTED_PLATFORMS.SQUARE.name as SupportedVexorPlatform,\n            identifier: identifier as string,\n            transmissionId: body.data.id,\n            timeStamp: new Date().toISOString(),\n            orderId: identifier,\n            eventType: body.type,\n            resource: body.data\n        }\n\n        return response;\n    } catch (error) {\n        console.error(error);\n        return {\n            message: 'Error processing Square webhook',\n            status: 'error',\n            transmissionId: '',\n            identifier: '',\n            timeStamp: new Date().toISOString(),\n            orderId: '',\n            eventType: '',\n            platform: SUPPORTED_PLATFORMS.SQUARE.name as SupportedVexorPlatform,\n            resource: '',\n        } as VexorWebhookResponse\n    }\n}","import { SUPPORTED_PLATFORMS } from \"@/lib/constants\";\nimport { VersionChecker } from \"@/lib/version-validator\";\nimport { SupportedVexorPlatform } from \"@/methods\";\nimport { \n    handleMercadoPagoWebhook,\n    handleStripeWebhook,\n    handlePaypalWebhook,\n    handleTaloWebhook,\n    handleSquareWebhook\n} from \"@/actions/webhooks/index\";\nimport { VexorWebhookResponse } from \"@/types/responses\";\n\nexport const vexorWebhook = (vexor: any) => {\n    return Object.assign(\n        // Generic webhook method\n        (req: Request) => vexor.handleWebhook(req),\n        // Platform-specific webhook methods\n        {\n            mercadopago: (req: Request) => vexor.handleWebhook(req),\n            stripe: (req: Request) => vexor.handleWebhook(req),\n            paypal: (req: Request) => vexor.handleWebhook(req),\n            talo: (req: Request) => vexor.handleWebhook(req),\n            square: (req: Request) => vexor.handleWebhook(req),\n        }\n    );\n}\n\nexport async function handleWebhook(vexor: any, req: Request): Promise<any> {\n    const headers = req.headers;\n\n    const url = new URL(req.url);\n    const queryParams = new URLSearchParams(url.searchParams);\n\n    // Detect the platform from the request headers\n    let platform: SupportedVexorPlatform | undefined;\n\n    if (headers.get('paypal-transmission-id')) {\n        platform = 'paypal';\n    } else if (headers.get('stripe-signature')) {\n        platform = 'stripe';\n    } else if (headers.get('referer')?.includes('mercadopago')) {\n        platform = 'mercadopago';\n    } else if (queryParams.get('vexorPlatform') === 'talo') {\n        platform = 'talo';\n    } else if (headers.get('x-square-hmacsha256-signature')) {\n        platform = 'square';\n    }\n\n    if (!platform) {\n        throw new Error('Unsupported payment platform or missing signature header');\n    }\n\n    const isOpenSource = VersionChecker.isOpenSource(vexor);\n\n    if (isOpenSource) {\n        let response: VexorWebhookResponse;\n\n        // Call the platform-specific method\n        switch (platform) {\n          case SUPPORTED_PLATFORMS.MERCADO_PAGO.name:\n            response = await handleMercadoPagoWebhook(vexor, req);\n            break;\n          case SUPPORTED_PLATFORMS.STRIPE.name:\n            response = await handleStripeWebhook(vexor, req);\n            break;\n          case SUPPORTED_PLATFORMS.PAYPAL.name:\n            response = await handlePaypalWebhook(vexor, req);\n            break;\n          case SUPPORTED_PLATFORMS.TALO.name:\n            response = await handleTaloWebhook(vexor, req);\n            break;\n          case SUPPORTED_PLATFORMS.SQUARE.name:\n            response = await handleSquareWebhook(vexor, req);\n            break;\n          default:\n            throw new Error(`Unsupported platform: ${platform}`);\n        }\n    \n        return response;\n    } else {\n\n        // Vexor Cloud\n        const body = await req.text();\n\n        if (!vexor.secretKey) {\n            throw new Error('Missing VEXOR_SECRET_KEY environment variable');\n        }\n\n        // Create a new request object with the same method, headers, and body\n        const forwardRequest = new Request(`${vexor.apiUrl}/webhooks/${platform}?${queryParams.toString()}`, {\n            method: req.method,\n            headers: new Headers(headers),\n            body: body,\n        });\n\n        // Add Vexor-specific headers\n        forwardRequest.headers.set('x-vexor-key', vexor.secretKey);\n        forwardRequest.headers.set('x-vexor-platform', platform);\n        forwardRequest.headers.set('x-vexor-project-id', vexor.projectId);\n\n        // Send the request to the Vexor API\n        const response = await fetch(forwardRequest);\n\n        // Parse the JSON response\n        const data = await response.json();\n\n        // Return the webhook response data\n        return data;\n    }\n}\n\n","import { SupportedVexorPlatform, VexorSubscriptionBody, VexorPaymentResponse } from \"../methods\";\n\nexport const vexorSubscribe = (vexor: any) => {\n    return Object.assign(\n        // Generic subscription method\n        (params: { platform: SupportedVexorPlatform } & VexorSubscriptionBody) =>\n            vexor.createSubscription(params.platform, params),\n        // Platform-specific subscription methods\n        {\n            mercadopago: (body: VexorSubscriptionBody) => vexor.createSubscription('mercadopago', body),\n            stripe: (body: VexorSubscriptionBody) => vexor.createSubscription('stripe', body),\n            paypal: (body: VexorSubscriptionBody) => vexor.createSubscription('paypal', body),\n        }\n    );\n}\n\nexport async function createSubscription(vexor: any, platform: SupportedVexorPlatform, body: VexorSubscriptionBody): Promise<VexorPaymentResponse> {\n    const response = await fetch(`${vexor.apiUrl}/subscriptions`, {\n        method: 'POST',\n        headers: {\n            'Content-Type': 'application/json',\n            'x-vexor-key': vexor.publishableKey,\n            'x-vexor-platform': platform,\n            'x-vexor-project-id': vexor.projectId,\n        },\n        body: JSON.stringify(body),\n    });\n\n    const data = await response.json();\n\n    if (!response.ok) {\n        const errorMessage = data.message || 'An unknown error occurred';\n        throw new Error(`Subscription request failed: ${errorMessage}`);\n    }\n\n    return data;\n}\n\n","import { SupportedVexorPlatform, VexorPortalBody, VexorPortalResponse } from \"../methods\";\n\nexport const vexorPortal = (vexor: any) => {\n    return Object.assign(\n        // Generic portal method\n        (params: { platform: SupportedVexorPlatform } & VexorPortalBody) =>\n            vexor.createPortal(params.platform, params),\n        // Platform-specific portal methods\n        {\n            mercadopago: (body: VexorPortalBody) => vexor.createPortal('mercadopago', body),\n            stripe: (body: VexorPortalBody) => vexor.createPortal('stripe', body),\n            paypal: (body: VexorPortalBody) => vexor.createPortal('paypal', body),\n        }\n    );\n}\n\nexport async function createPortal(vexor: any, platform: SupportedVexorPlatform, body: VexorPortalBody): Promise<VexorPortalResponse> {\n    const response = await fetch(`${vexor.apiUrl}/portals`, {\n        method: 'POST',\n        headers: {\n            'Content-Type': 'application/json',\n            'x-vexor-key': vexor.publishableKey,\n            'x-vexor-platform': platform,\n            'x-vexor-project-id': vexor.projectId,\n        },\n        body: JSON.stringify(body),\n    });\n\n    const data = await response.json();\n\n    if (!response.ok) {\n        const errorMessage = data.message || 'An unknown error occurred';\n        throw new Error(`Portal request failed: ${errorMessage}`);\n    }\n\n    return data;\n}\n\n","import { SupportedVexorPlatform, VexorConnectBody, VexorConnectResponse, VexorConnectAuthBody, VexorConnectPayBody, VexorConnectDashboardBody, VexorConnectAuthRefreshBody, VexorConnectRefundRequest } from \"../methods\";\n\nexport const vexorConnect = (vexor: any) => {\n  return Object.assign(\n    // Generic connect method\n    (params: { platform: SupportedVexorPlatform } & VexorConnectBody) =>\n      vexor.createConnect(params.platform, params),\n    // Platform-specific connect methods\n    {\n      mercadopago: (body: VexorConnectBody) => vexor.createConnect('mercadopago', body),\n      stripe: (body: VexorConnectBody) => vexor.createConnect('stripe', body),\n      auth: Object.assign(\n        (body: VexorConnectAuthBody) => vexor.createConnectAuth(body),\n        {\n          refresh: (body: VexorConnectAuthRefreshBody) => vexor.createConnectAuthRefresh(body),\n        }\n      ),\n      pay: Object.assign(\n        (params: { platform: SupportedVexorPlatform } & VexorConnectPayBody) =>\n          vexor.createConnectPay(params.platform, params),\n        {\n          mercadopago: (body: VexorConnectPayBody) => vexor.createConnectPay('mercadopago', body),\n          stripe: (body: VexorConnectPayBody) => vexor.createConnectPay('stripe', body),\n        }\n      ),\n      dashboard: (body: VexorConnectDashboardBody) => vexor.createConnectDashboard(body),\n      refund: Object.assign(\n        // Generic refund method\n        (params: { platform: SupportedVexorPlatform } & VexorConnectRefundRequest) =>\n            vexor.createConnectRefund(params.platform, params),\n        // Platform-specific refund methods\n        {\n            mercadopago: (body: VexorConnectRefundRequest) => vexor.createConnectRefund('mercadopago', body),\n            stripe: (body: VexorConnectRefundRequest) => vexor.createConnectRefund('stripe', body),\n            /* paypal: (body: VexorConnectRefundRequest) => vexor.createConnectRefund('paypal', body), */\n        }\n      ),\n    }\n  );\n}\n\nexport async function createConnect(vexor: any, platform: SupportedVexorPlatform, body: VexorConnectBody): Promise<VexorConnectResponse> {\n  const response = await fetch(`${vexor.apiUrl}/connect`, {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json',\n      'x-vexor-key': vexor.secretKey,\n      'x-vexor-platform': platform,\n      'x-vexor-project-id': vexor.projectId,\n      'x-vexor-action': 'connect',\n    },\n    body: JSON.stringify(body),\n  });\n\n  const data = await response.json();\n\n  if (!response.ok) {\n    const errorMessage = data.message || 'An unknown error occurred';\n    throw new Error(`Connect request failed: ${errorMessage}`);\n  }\n\n  return data;\n}\n\nexport async function createConnectAuth(vexor: any, body: VexorConnectAuthBody): Promise<VexorConnectResponse> {\n  const response = await fetch(`${vexor.apiUrl}/connect`, {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json',\n      'x-vexor-key': vexor.secretKey,\n      'x-vexor-platform': 'mercadopago',\n      'x-vexor-project-id': vexor.projectId,\n      'x-vexor-action': 'get_credentials',\n    },\n    body: JSON.stringify(body),\n  });\n\n  const data = await response.json();\n\n  if (!response.ok) {\n    const errorMessage = data.message || 'An unknown error occurred';\n    throw new Error(`Connect auth request failed: ${errorMessage}`);\n  }\n\n  return data;\n}\n\nexport async function createConnectPay(vexor: any, platform: SupportedVexorPlatform, body: VexorConnectPayBody): Promise<VexorConnectResponse> {\n  const response = await fetch(`${vexor.apiUrl}/connect`, {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json',\n      'x-vexor-key': vexor.secretKey,\n      'x-vexor-platform': platform,\n      'x-vexor-project-id': vexor.projectId,\n      'x-vexor-action': 'create_payment',\n    },\n    body: JSON.stringify(body),\n  });\n\n  const data = await response.json();\n\n  if (!response.ok) {\n    const errorMessage = data.message || 'An unknown error occurred';\n    throw new Error(`Connect pay request failed: ${errorMessage}`);\n  }\n\n  return data;\n}\n\nexport async function createConnectDashboard(vexor: any, body: VexorConnectDashboardBody): Promise<VexorConnectResponse> {\n  const response = await fetch(`${vexor.apiUrl}/connect`, {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json',\n      'x-vexor-key': vexor.secretKey,\n      'x-vexor-platform': 'stripe',\n      'x-vexor-project-id': vexor.projectId,\n      'x-vexor-action': 'get_dashboard_link',\n    },\n    body: JSON.stringify(body),\n  });\n\n  const data = await response.json();\n\n  if (!response.ok) {\n    const errorMessage = data.message || 'An unknown error occurred';\n    throw new Error(`Connect dashboard request failed: ${errorMessage}`);\n  }\n\n  return data;\n}\n\nexport async function createConnectRefund(vexor: any, platform: SupportedVexorPlatform, body: VexorConnectRefundRequest): Promise<VexorConnectResponse> {\n  const response = await fetch(`${vexor.apiUrl}/connect`, {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json',\n      'x-vexor-key': vexor.secretKey,\n      'x-vexor-platform': platform,\n      'x-vexor-project-id': vexor.projectId,\n      'x-vexor-action': 'create_refund',\n    },\n    body: JSON.stringify(body),\n  });\n\n  const data = await response.json();\n\n  if (!response.ok) {\n    const errorMessage = data.message || 'An unknown error occurred';\n    throw new Error(`Connect refund request failed: ${errorMessage}`);\n  }\n\n  return data;\n}\n\nexport async function createConnectAuthRefresh(vexor: any, body: VexorConnectAuthRefreshBody): Promise<VexorConnectResponse> {\n  const response = await fetch(`${vexor.apiUrl}/connect`, {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json',\n      'x-vexor-key': vexor.secretKey,\n      'x-vexor-platform': 'mercadopago',\n      'x-vexor-project-id': vexor.projectId,\n      'x-vexor-action': 'refresh_credentials',\n    },\n    body: JSON.stringify(body),\n  });\n\n  const data = await response.json();\n\n  if (!response.ok) {\n    const errorMessage = data.message || 'An unknown error occurred';\n    throw new Error(`Connect auth refresh request failed: ${errorMessage}`);\n  }\n\n  return data;\n}\n\n","import { SUPPORTED_PLATFORMS } from \"../../../lib/constants\";\nimport { Vexor } from \"../../../methods\";\n\nconst retrieveMercadoPagoOperation = async (\n    vexor: Vexor,\n    identifier: string\n) => {\n\n    try {\n\n        // Get the platform credentials\n        const platformCredentials = vexor.platforms?.mercadopago\n\n        if (!platformCredentials) {\n            throw new Error('MercadoPago credentials not found');\n        }\n\n        const mercadopagoAccessToken = platformCredentials.access_token\n\n        if (!mercadopagoAccessToken) {\n            throw new Error('MercadoPago access token not found');\n        }\n\n\n        const API_URL = SUPPORTED_PLATFORMS.MERCADO_PAGO.base_url.production;\n\n\n        // Endpoint exaample: https://api.mercadopago.com/v1/payments/search?sort=date_created&criteria=desc&external_reference=ID_REF&range=date_created&begin_date=NOW-30DAYS&end_date=NOW&store_id=47792478&pos_id=58930090&collector.id=448876418&payer.id=1162600213'\n        // Make the API call to Mercadopago\n        const operation_response: any = await fetch(`${API_URL}/v1/payments/search?sort=date_created&criteria=desc&external_reference=${identifier}&begin_date=NOW-364DAYS&end_date=NOW`, {\n            method: \"GET\",\n            headers: {\n                \"Content-Type\": \"application/json\",\n                \"Authorization\": `Bearer ${mercadopagoAccessToken}`,\n            },\n        })\n\n        // Get the API response\n        const operation_data = await operation_response.json();\n\n        // Get the payment\n        const payment = operation_data.results[0]\n\n        return {\n            message: 'Mercadopago operation retrieved',\n            raw: payment,\n            identifier\n        }\n\n    } catch (error) {\n        console.error('Error retrieving MercadoPago operation', error);\n        throw error;\n    }\n}\n\nexport default retrieveMercadoPagoOperation;   ","import { generate_x_IdempotencyKey } from \"@/lib/idemopotency-keygen\";\nimport { SUPPORTED_PLATFORMS } from \"../../../lib/constants\";\nimport { Vexor } from \"../../../methods\";\nimport { VexorPaymentBody, VexorRefundBody } from \"../../../types/requests\";\nimport { VexorPaymentResponse } from \"../../../types/responses\";\nimport { v4 as uuidv4 } from 'uuid';\nimport retrieveMercadoPagoOperation from \"@/actions/retrievals/mercadopago/retrieve-mercadopago-operation\";\n\nconst refundMercadoPagoPayment = async (\n    vexor: Vexor,\n    body: VexorRefundBody\n) => {\n\n    try {\n\n        // Get the platform credentials\n        const platformCredentials = vexor.platforms?.mercadopago\n\n        if (!platformCredentials) {\n            throw new Error('MercadoPago credentials not found');\n        }\n\n        const mercadopagoAccessToken = platformCredentials.access_token\n\n        if (!mercadopagoAccessToken) {\n            throw new Error('MercadoPago access token not found');\n        }\n\n     \n        const idempotency_key = generate_x_IdempotencyKey()\n\n\n        const API_URL = SUPPORTED_PLATFORMS.MERCADO_PAGO.base_url.production;\n\n        \n        // Retrieve the payment\n        const payment_response = await retrieveMercadoPagoOperation(vexor, body.identifier)\n\n        if (!payment_response.raw) {\n            throw new Error('MercadoPago payment not found');\n        }\n\n        const paymentId = payment_response.raw.id\n\n        // Refund the payment\n         // Make the API call to Mercadopago\n         const refund_response: any = await fetch(`${API_URL}/v1/payments/${paymentId}/refunds`, {\n            method: \"POST\",\n            headers: {\n                \"Content-Type\": \"application/json\",\n                \"Authorization\": `Bearer ${mercadopagoAccessToken}`,\n                \"X-Idempotency-Key\": idempotency_key\n            }\n        }).then(res => res.json());\n        \n        if (refund_response.error) {\n            throw new Error(refund_response.error);\n        }\n\n        return {\n            message: 'MercadoPago payment refunded',\n            raw: refund_response,\n            identifier: body.identifier as string\n        }\n      \n\n    } catch (error: any) {\n        return {\n            message: 'Error refunding MercadoPago payment',\n            raw: error,\n            identifier: body.identifier as string,\n            error: error.message || 'Unknown error'\n        }\n    }\n}\n\nexport default refundMercadoPagoPayment;   ","import Stripe from \"stripe\";\nimport { Vexor } from \"../../../methods\";\n\nconst retrieveStripeOperation = async (\n    vexor: Vexor,\n    identifier: string\n) => {\n\n    try {\n\n        // Get the platform credentials\n        const platformCredentials = vexor.platforms?.stripe\n\n        if (!platformCredentials) {\n            throw new Error('Stripe credentials not found');\n        }\n\n        const stripeSecretKey = platformCredentials.secret_key\n\n        if (!stripeSecretKey) {\n            throw new Error('Stripe secret key not found');\n        }\n\n        const stripe = new Stripe(stripeSecretKey);\n\n        // Get the API response\n        const operation_data = await stripe.paymentIntents.search({\n            query: `metadata[\"identifier\"]:\"${identifier}\"`,\n        });\n\n       \n        const payment = operation_data.data[0]\n\n        return {\n            message: 'Stripe operation retrieved',\n            raw: payment as Stripe.PaymentIntent,\n            identifier\n        }\n\n    } catch (error) {\n        console.error('Error retrieving Stripe operation', error);\n        throw error;\n    }\n}\n\nexport default retrieveStripeOperation;   ","// Helper function to safely serialize any object\nexport const serializeToPlainObject = (obj: any): any => {\n    return JSON.parse(JSON.stringify(obj, (key, value) => {\n        // Handle special cases like BigInt, Date, etc.\n        if (typeof value === 'bigint') {\n            return value.toString();\n        }\n        if (value instanceof Date) {\n            return value.toISOString();\n        }\n        return value;\n    }));\n};","import retrieveStripeOperation from \"@/actions/retrievals/stripe/retrieve-stripe-operation\";\nimport { serializeToPlainObject } from \"@/lib/object-serialize\";\nimport Stripe from \"stripe\";\nimport { Vexor } from \"../../../methods\";\nimport { VexorRefundBody } from \"../../../types/requests\";\n\nconst refundStripePayment = async (\n    vexor: Vexor,\n    body: VexorRefundBody\n) => {\n\n    try {\n\n        // Get the platform credentials\n        const platformCredentials = vexor.platforms?.stripe\n\n        if (!platformCredentials) {\n            throw new Error('Stripe credentials not found');\n        }\n\n        const stripeSecretKey = platformCredentials.secret_key\n\n        if (!stripeSecretKey) {\n            throw new Error('Stripe secret key not found');\n        }\n\n        const stripe = new Stripe(stripeSecretKey);\n        \n        // Retrieve the payment\n        const payment_response = await retrieveStripeOperation(vexor, body.identifier)\n\n        if (!payment_response.raw) {\n            throw new Error('Stripe payment not found');\n        }\n\n        // Get the payment id\n        const paymentId = payment_response.raw.id\n\n        // Refund the payment\n        const refund_response = await stripe.refunds.create({\n            payment_intent: paymentId,\n            metadata: {\n                identifier: body.identifier\n            }\n        });\n\n        return {\n            message: 'Stripe payment refunded',\n            raw: serializeToPlainObject(refund_response),\n            identifier: body.identifier as string\n        }\n      \n\n    } catch (error: any) {\n        return {\n            message: 'Error refunding Stripe payment',\n            raw: error,\n            identifier: body.identifier as string,\n            error: error.message || 'Unknown error'\n        }\n    }\n}\n\nexport default refundStripePayment;   ","import { generatePaypalAccessToken } from \"@/actions/authorizations/paypal/generate-paypal-access-token\";\nimport { SUPPORTED_PLATFORMS } from \"../../../lib/constants\";\nimport { Vexor } from \"../../../methods\";\n\nconst retrievePaypalOperation = async (\n    vexor: Vexor,\n    identifier: string\n) => {\n\n    try {\n\n        // Get the platform credentials\n        const platformCredentials = vexor.platforms?.paypal\n\n        if (!platformCredentials) {\n            throw new Error('Paypal credentials not found');\n        }\n\n        const paypalClientId = platformCredentials.client_id\n\n        if (!paypalClientId) {\n            throw new Error('Paypal client id not found');\n        }\n\n        const paypalSecretKey = platformCredentials.secret_key\n\n        if (!paypalSecretKey) {\n            throw new Error('Paypal secret key not found');\n        }\n\n\n        // Check if it's a sandbox or production environment\n        const isSandbox = platformCredentials?.sandbox === true;\n        const API_URL = isSandbox ? SUPPORTED_PLATFORMS.PAYPAL.base_url.sandbox : SUPPORTED_PLATFORMS.PAYPAL.base_url.production;\n\n        // Generate the access token\n        const accessToken = await generatePaypalAccessToken(paypalClientId, paypalSecretKey, API_URL);\n\n        // Get the order details\n        const orderResponse = await fetch(`${API_URL}/v2/checkout/orders/${identifier}`, {\n            method: 'GET',\n            headers: {\n                'Content-Type': 'application/json',\n                'Authorization': `Bearer ${accessToken}`,\n            }\n        });\n\n        const orderData = await orderResponse.json();\n\n        // If the order is captured, get the capture ID from the purchase units\n        if (orderData.status === 'COMPLETED') {\n            const captureId = orderData.purchase_units[0].payments.captures[0].id;\n            \n            // Now get the capture details\n            const captureResponse = await fetch(`${API_URL}/v2/payments/captures/${captureId}`, {\n                method: 'GET',\n                headers: {\n                    'Content-Type': 'application/json',\n                    'Authorization': `Bearer ${accessToken}`,\n                }\n            });\n\n            const captureData = await captureResponse.json();\n\n            return {\n                message: 'Paypal operation retrieved',\n                raw: {\n                    order: orderData,\n                    capture: captureData\n                },\n                identifier\n            }\n        }\n\n        // If order is not completed, return the order data\n        return {\n            message: 'Paypal operation retrieved',\n            raw: orderData,\n            identifier\n        }\n\n    } catch (error) {\n        console.error('Error retrieving Paypal operation', error);\n        throw error;\n    }\n}\n\nexport default retrievePaypalOperation;   ","import retrieveStripeOperation from \"@/actions/retrievals/stripe/retrieve-stripe-operation\";\nimport { serializeToPlainObject } from \"@/lib/object-serialize\";\nimport Stripe from \"stripe\";\nimport { Vexor } from \"../../../methods\";\nimport { VexorRefundBody } from \"../../../types/requests\";\nimport { SUPPORTED_PLATFORMS } from \"@/lib/constants\";\nimport { generatePaypalAccessToken } from \"@/actions/authorizations/paypal/generate-paypal-access-token\";\nimport retrievePaypalOperation from \"@/actions/retrievals/paypal/retrieve-paypal-operation\";\n\nconst refundPaypalPayment = async (\n    vexor: Vexor,\n    body: VexorRefundBody\n) => {\n\n    try {\n\n        // Get the platform credentials\n        const platformCredentials = vexor.platforms?.paypal\n\n        if (!platformCredentials) {\n            throw new Error('Paypal credentials not found');\n        }\n\n        const paypalClientId = platformCredentials.client_id\n\n        if (!paypalClientId) {\n            throw new Error('Paypal client id not found');\n        }\n\n        const paypalSecretKey = platformCredentials.secret_key\n\n        if (!paypalSecretKey) {\n            throw new Error('Paypal secret key not found');\n        }\n\n        // Check if it's a sandbox or production environment\n        const isSandbox = platformCredentials?.sandbox === true;\n        const API_URL = isSandbox ? SUPPORTED_PLATFORMS.PAYPAL.base_url.sandbox : SUPPORTED_PLATFORMS.PAYPAL.base_url.production;\n\n\n\n        // Generate the access token\n        const accessToken = await generatePaypalAccessToken(paypalClientId, paypalSecretKey, API_URL);\n\n        \n        // Retrieve the payment\n        const payment_response = await retrievePaypalOperation(vexor, body.identifier)\n\n        // A paypal order is not completed -and can't be refunded- until a capture is created\n        if (!payment_response.raw?.capture) {\n            throw new Error('Paypal payment capture not found. Order is not completed yet or not found.');\n        }\n\n        // Get the payment capture id\n        const paymentCaptureId = payment_response.raw.capture.id\n\n        // Refund the payment\n        const refund_response = await fetch(`${API_URL}/v2/payments/captures/${paymentCaptureId}/refund`, {\n            method: 'POST',\n            headers: {\n                'Content-Type': 'application/json',\n                'Authorization': `Bearer ${accessToken}`,\n                'PayPal-Request-Id': body.identifier\n            }\n        })\n\n        // Check if the refund was successful\n        if (!refund_response.ok && (refund_response.status !== 200 && refund_response.status !== 201)) {\n            throw new Error('Error refunding Paypal payment');\n        }\n    \n        return {\n            message: 'Paypal payment refunded',\n            raw: serializeToPlainObject(await refund_response.json()),\n            identifier: body.identifier as string\n        }\n      \n\n    } catch (error: any) {\n        return {\n            message: 'Error refunding Paypal payment',\n            raw: error,\n            identifier: body.identifier as string,\n            error: error.message || 'Unknown error'\n        }\n    }\n}\n\nexport default refundPaypalPayment;   ","import { VersionChecker } from \"@/lib/version-validator\";\nimport { SupportedVexorPlatform, VexorRefundBody, VexorRefundResponse } from \"../methods\";\nimport { SUPPORTED_PLATFORMS } from \"@/lib/constants\";\nimport refundMercadoPagoPayment from \"@/actions/refunds/mercadopago/refund-mercadopago-payment\";\nimport refundStripePayment from \"@/actions/refunds/stripe/refund-stripe-payment\";\nimport refundPaypalPayment from \"@/actions/refunds/paypal/refund-paypal-payment\";\n\nexport const vexorRefund = (vexor: any) => {\n    return Object.assign(\n        // Generic refund method\n        (params: { platform: SupportedVexorPlatform } & VexorRefundBody) =>\n            vexor.createRefund(params.platform, params),\n        // Platform-specific refund methods\n        {\n            mercadopago: (body: VexorRefundBody) => vexor.createRefund('mercadopago', body),\n            stripe: (body: VexorRefundBody) => vexor.createRefund('stripe', body),\n            paypal: (body: VexorRefundBody) => vexor.createRefund('paypal', body),\n        }\n    );\n}\n\nexport async function createRefund(vexor: any, platform: SupportedVexorPlatform, body: VexorRefundBody): Promise<VexorRefundResponse> {\n\n\n    const isOpenSource = VersionChecker.isOpenSource(vexor);\n\n    // Vexor Open Source\n    if (isOpenSource) {\n\n        let response: VexorRefundResponse;\n\n        // Call the platform-specific method\n        switch (platform) {\n            case SUPPORTED_PLATFORMS.MERCADO_PAGO.name:\n                response = await refundMercadoPagoPayment(vexor, body);\n                break;\n            case SUPPORTED_PLATFORMS.STRIPE.name:\n                response = await refundStripePayment(vexor, body);\n                break;\n            case SUPPORTED_PLATFORMS.PAYPAL.name:\n               response = await refundPaypalPayment(vexor, body);\n               break;\n           /*  case SUPPORTED_PLATFORMS.TALO.name:\n               response = await createTaloCheckout(vexor, body);\n               break;\n             case SUPPORTED_PLATFORMS.SQUARE.name:\n               response = await createSquareCheckout(vexor, body);\n               break; */\n            default:\n                throw new Error(`Unsupported platform: ${platform}`);\n        }\n\n        return response;\n\n    } else {\n\n        // Vexor Cloud\n\n        const response = await fetch(`${vexor.apiUrl}/refunds`, {\n            method: 'POST',\n            headers: {\n                'Content-Type': 'application/json',\n                'x-vexor-key': vexor.secretKey,\n                'x-vexor-platform': platform,\n                'x-vexor-project-id': vexor.projectId,\n            },\n            body: JSON.stringify(body),\n        });\n\n        const data = await response.json();\n\n        if (!response.ok) {\n            const errorMessage = data.message || 'An unknown error occurred';\n            throw new Error(`Refund request failed: ${errorMessage}`);\n        }\n\n        return data;\n    }\n}","import { createCheckout, vexorPay } from \"./methods/pay\";\nimport { handleWebhook, vexorWebhook } from \"./methods/webhook\";\nimport { createSubscription, vexorSubscribe } from \"./methods/subscribe\";\nimport { createPortal, vexorPortal } from \"./methods/portal\";\nimport {\n  createConnect,\n  createConnectAuth,\n  createConnectPay,\n  createConnectDashboard,\n  vexorConnect,\n  createConnectAuthRefresh,\n  createConnectRefund\n} from \"./methods/connect\";\nimport { createRefund, vexorRefund } from \"./methods/refund\";\nimport { SupportedVexorPlatform } from \"./types/platforms\";\nimport {\n  VexorPaymentBody,\n  VexorSubscriptionBody,\n  VexorPortalBody,\n  VexorConnectBody,\n  VexorConnectAuthBody,\n  VexorConnectAuthRefreshBody,\n  VexorConnectPayBody,\n  VexorConnectDashboardBody,\n  VexorConnectRefundRequest,\n  VexorRefundBody\n} from \"./types/requests\";\n\nimport {\n  VexorPaymentResponse,\n  VexorSubscriptionResponse,\n  VexorPortalResponse,\n  VexorConnectResponse,\n  VexorConnectDashboardResponse,\n  VexorRefundResponse\n} from \"./types/responses\";\n\nimport { OpenSourceConfig, VexorConfig } from \"./types/configuration\";\n\n\n// Main Vexor class for handling payments\nclass Vexor {\n  // Singleton instance of Vexor\n  private static instance: Vexor | null = null;\n\n  // Using Vexor Cloud (commercial) version\n  private publishableKey?: string;\n  private secretKey?: string;\n  private projectId?: string;\n  private apiUrl: string = \"https://www.vexorpay.com/api\";\n\n  // Using Vexor open source version\n  public platforms?: OpenSourceConfig;\n\n  // Add custom to the class properties\n  custom: (url: string) => Vexor;\n\n  // Constructor to initialize Vexor with parameters object\n  constructor(params: VexorConfig) {\n\n    // Vexor Cloud\n    this.publishableKey = params.publishableKey;\n    this.secretKey = params.secretKey;\n    this.projectId = params.projectId;\n\n    // Vexor open source configuration\n    this.platforms = params.platforms || {};\n\n    // Methods\n    this.pay = vexorPay(this);\n    this.webhook = vexorWebhook(this);\n    this.subscribe = vexorSubscribe(this);\n    this.portal = vexorPortal(this);\n    this.connect = vexorConnect(this);\n    this.refund = vexorRefund(this);\n\n    // Test the API against a custom API URL\n    this.custom = (url: string) => this.setApiUrl(url);\n  }\n\n  // Create a Vexor instance using environment variables. \n  // This way of creating an instance is used for Vexor Cloud only\n  static fromEnv(): Vexor & { custom: (url: string) => Vexor } {\n    if (!Vexor.instance) {\n\n      const publishableKey = \n      /* Next.js */\n      process.env.NEXT_PUBLIC_VEXOR_PUBLISHABLE_KEY \n      /* Node.js */\n      || process.env.VEXOR_PUBLISHABLE_KEY;\n\n\n      const secretKey = \n      /* Next.js */\n      process.env.NEXT_PUBLIC_VEXOR_SECRET_KEY \n      /* Node.js */\n      || process.env.VEXOR_SECRET_KEY;\n\n      \n      const projectId = \n      /* Next.js */\n      process.env.NEXT_PUBLIC_VEXOR_PROJECT \n      /* Node.js */\n      || process.env.VEXOR_PROJECT;\n\n      if (!publishableKey) {\n        throw new Error('Missing environment variable for publishable key');\n      }\n      if (!projectId) {\n        throw new Error('Missing environment variable for project ID');\n      }\n      Vexor.instance = new Vexor({ publishableKey, projectId, secretKey });\n    }\n\n    const instance = Vexor.instance as Vexor & { custom: (url: string) => Vexor };\n    instance.custom = function (url: string) {\n      return this.setApiUrl(url);\n    };\n\n    return instance;\n  }\n\n  // Create a Vexor instance with provided parameters\n  static init(params: VexorConfig): Vexor & { custom: (url: string) => Vexor } {\n\n    // Use either Vexor Cloud or Vexor OpenSource\n    if (params.platforms && (params.publishableKey || params.secretKey || params.projectId)) { \n      throw new Error('Vexor Cloud and Vexor OpenSource cannot be used together, please define only the platforms if you are using Vexor OpenSource or only the publishableKey, secretKey and projectId if you are using Vexor Cloud');\n    }\n\n    const instance = new Vexor(params) as Vexor & { custom: (url: string) => Vexor };\n    instance.custom = function (url: string) {\n      return this.setApiUrl(url);\n    };\n    return instance;\n  }\n\n  // ============================================\n  // vexor.pay and vexor.pay.platform     [START]\n  // ============================================\n\n  /**\n * Pay method with platform-specific shortcuts.\n * @type {Object}\n * @property {Function} mercadopago - Shortcut for MercadoPago payments.\n * @property {Function} stripe - Shortcut for Stripe payments.\n * @property {Function} paypal - Shortcut for PayPal payments.\n * @property {Function} talo - Shortcut for Talo payments.\n * @example\n * // Generic usage\n * vexor.pay({ platform: 'mercadopago', items: [...] });\n * \n * // Platform-specific shortcut\n * vexor.pay.mercadopago({ items: [...] });\n * \n * @description\n * Facilitates simple checkout scenarios for various payment platforms.\n */\n\n  pay: ReturnType<typeof vexorPay>\n  createCheckout(platform: SupportedVexorPlatform, body: VexorPaymentBody): Promise<VexorPaymentResponse> {\n    return createCheckout(this, platform, body);\n  }\n  // ============================================\n  // vexor.pay and vexor.pay.platform       [END]\n  // ============================================\n\n\n  // ============================================\n  // vexor.webhook                        [START]\n  // ============================================\n  /**\n     * Webhook method with platform-specific shortcuts.\n     * @type {Object}\n     * @property {Function} mercadopago - Shortcut for MercadoPago webhooks.\n     * @property {Function} stripe - Shortcut for Stripe webhooks.\n     * @property {Function} paypal - Shortcut for PayPal webhooks.\n     * @property {Function} talo - Shortcut for Talo webhooks.\n     * @property {Function} square - Shortcut for Square webhooks.\n     * @example\n     * // Generic usage\n     * vexor.webhook(req);\n     * \n     * // Platform-specific shortcut\n     * vexor.webhook.mercadopago(req);\n     * vexor.webhook.talo(req);\n     * vexor.webhook.paypal(req);\n     * vexor.webhook.stripe(req);\n     * vexor.webhook.square(req);\n     * @description\n     * Facilitates webhook handling for various payment platforms.\n     */\n  webhook: ReturnType<typeof vexorWebhook>;\n\n  handleWebhook(req: Request): Promise<any> {\n    return handleWebhook(this, req);\n  }\n  // ============================================\n  // vexor.webhook                          [END]\n  // ============================================\n\n\n  // ========================================================\n  // vexor.subscribe and vexor.subscribe.platform     [START]\n  // ========================================================\n  /**\n   * Subscription method with platform-specific shortcuts.\n   * @type {Object}\n   * @property {Function} mercadopago - Shortcut for MercadoPago subscriptions.\n   * @property {Function} stripe - Shortcut for Stripe subscriptions.\n   * @property {Function} paypal - Shortcut for PayPal subscriptions.\n   * \n   * @example\n   * // Generic usage\n   * vexor.subscribe({ platform: 'mercadopago', body });\n   * \n   * // Platform-specific shortcut\n   * vexor.subscribe.mercadopago({ body });\n   * \n   * @description\n   * Facilitates simple subscription scenarios for various payment platforms.\n   */\n  subscribe: ReturnType<typeof vexorSubscribe>;\n\n  createSubscription(platform: SupportedVexorPlatform, body: VexorSubscriptionBody): Promise<VexorSubscriptionResponse> {\n    return createSubscription(this, platform, body);\n  }\n  // ========================================================\n  // vexor.subscribe and vexor.subscribe.platform       [END]\n  // ========================================================\n\n  // ========================================================\n  // vexor.portal and vexor.portal.platform     [START]\n  // ========================================================\n  /**\n   * Billing portal method with platform-specific shortcuts.\n   * @type {Object}\n   * @property {Function} mercadopago - Shortcut for MercadoPago portals.\n   * @property {Function} stripe - Shortcut for Stripe portals.\n   * @property {Function} paypal - Shortcut for PayPal portals.\n   * \n   * @example\n   * // Generic usage\n   * vexor.portal({ platform: 'mercadopago', body });\n   * \n   * // Platform-specific shortcut\n   * vexor.portal.mercadopago({ body });\n   * \n   * @description\n   * Facilitates creation of billing portals for various payment platforms.\n   */\n  portal: ReturnType<typeof vexorPortal>;\n\n  createPortal(platform: SupportedVexorPlatform, body: VexorPortalBody): Promise<VexorPortalResponse> {\n    return createPortal(this, platform, body);\n  }\n  // ========================================================\n  // vexor.portal and vexor.portal.platform       [END]\n  // ========================================================\n\n  // ========================================================\n  // vexor.connect and related methods              [START]\n  // ========================================================\n  /**\n   * Connect method with platform-specific shortcuts.\n   * @type {Object}\n   * @property {Function} mercadopago - Shortcut for MercadoPago connect.\n   * @property {Function} stripe - Shortcut for Stripe connect.\n   * @property {Function} auth - Shortcut for MercadoPago auth.\n   * @property {Object} pay - Object with payment methods for connected accounts.\n   * @property {Function} dashboard - Shortcut for Stripe dashboard link.\n   * @property {Function} refund - Shortcut for Stripe refund.\n   * \n   * @example\n   * // Generic usage\n   * vexor.connect({ platform: 'stripe', redirectUrl: 'www.example.com', countryCode: 'US', express: true });\n   * \n   * // Platform-specific shortcut\n   * vexor.connect.mercadopago({ redirectUrl: 'www.example.com', countryCode: 'AR' });\n   * \n   * @description\n   * Facilitates account connection for various payment platforms.\n   */\n  connect: ReturnType<typeof vexorConnect>;\n\n  createConnect(platform: SupportedVexorPlatform, body: VexorConnectBody): Promise<VexorConnectResponse> {\n    return createConnect(this, platform, body);\n  }\n\n  createConnectAuth(body: VexorConnectAuthBody): Promise<VexorConnectResponse> {\n    return createConnectAuth(this, body);\n  }\n\n  createConnectPay(platform: SupportedVexorPlatform, body: VexorConnectPayBody): Promise<VexorConnectResponse> {\n    return createConnectPay(this, platform, body);\n  }\n\n  createConnectDashboard(body: VexorConnectDashboardBody): Promise<VexorConnectResponse> {\n    return createConnectDashboard(this, body);\n  }\n\n  createConnectAuthRefresh(body: VexorConnectAuthRefreshBody): Promise<VexorConnectResponse> {\n    return createConnectAuthRefresh(this, body);\n  }\n\n  createConnectRefund(platform: SupportedVexorPlatform, body: VexorConnectRefundRequest): Promise<VexorConnectResponse> {\n    return createConnectRefund(this, platform, body);\n  }\n  // ========================================================\n  // vexor.connect and related methods                [END]\n  // ========================================================\n\n  /**\n   * Refund method with platform-specific shortcuts.\n   * @type {Object}\n   * @property {Function} mercadopago - Shortcut for MercadoPago refunds.\n   * @property {Function} stripe - Shortcut for Stripe refunds.\n   * @property {Function} paypal - Shortcut for PayPal refunds.\n   * \n   * @example\n   * // Generic usage\n   * vexor.refund({ platform: 'mercadopago', paymentId: 'payment_123' });\n   * \n   * // Platform-specific shortcut\n   * vexor.refund.mercadopago({ paymentId: 'payment_123' });\n   * \n   * @description\n   * Facilitates refund processing for various payment platforms.\n   */\n  refund: ReturnType<typeof vexorRefund>;\n\n  createRefund(platform: SupportedVexorPlatform, body: VexorRefundBody): Promise<VexorRefundResponse> {\n    return createRefund(this, platform, body);\n  }\n\n  private setApiUrl(url: string): Vexor {\n    this.apiUrl = url;\n    return this;\n  }\n\n}\n\n// Export the Vexor class as a named export instead of default\nexport { Vexor };\n\n// Also export the types and interfaces\nexport type {\n  SupportedVexorPlatform,\n  VexorPaymentBody,\n  VexorSubscriptionBody,\n  VexorPaymentResponse,\n  VexorConfig,\n  VexorPortalResponse,\n  VexorPortalBody,\n  VexorConnectBody,\n  VexorConnectAuthBody,\n  VexorConnectAuthRefreshBody,\n  VexorConnectPayBody,\n  VexorConnectDashboardBody,\n  VexorConnectDashboardResponse,\n  VexorConnectResponse,\n  VexorRefundBody,\n  VexorRefundResponse,\n  VexorSubscriptionResponse,\n  VexorConnectRefundRequest\n};\n"]}